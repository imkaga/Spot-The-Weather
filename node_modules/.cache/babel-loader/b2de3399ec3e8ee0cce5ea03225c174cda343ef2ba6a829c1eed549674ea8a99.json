{"ast":null,"code":"var _jsxFileName = \"/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as Utils from './Utils'; // Import functions from Utils.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [city, setCity] = useState(''); // State for storing the city input\n  const [weatherData, setWeatherData] = useState(null); // State for storing weather data\n  const [errorMessage, setErrorMessage] = useState(''); // State for error messages\n  const [userName, setUserName] = useState(''); // State for storing user's name\n  const [loggedIn, setLoggedIn] = useState(false); // State for user login status\n  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'main'); // State for storing theme\n  const [recommendedTracks, setRecommendedTracks] = useState(() => JSON.parse(localStorage.getItem('recommendedTracks')) || []); // State for storing recommended tracks\n  const [userId, setUserId] = useState(''); // State for storing user's Spotify user ID\n  const [refreshCount, setRefreshCount] = useState(0); // State for storing the refresh count\n  const [lastRefreshTime, setLastRefreshTime] = useState(() => parseInt(localStorage.getItem('lastRefreshTime')) || null); // State for storing the last refresh time\n  const [countdown, setCountdown] = useState(null); // State for countdown until next refresh\n  const [showButton, setShowButton] = useState(true); // State for showing or hiding the refresh button\n\n  const handleLogin = Utils.authenticate; // Function for handling login\n\n  const handleLogout = () => {\n    // Function for handling logout\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    setLoggedIn(false);\n    window.location.href = '/';\n  };\n  useEffect(() => {\n    // Effect for handling authorization code\n    Utils.handleAuthorizationCode().then(() => {\n      const accessToken = localStorage.getItem('access_token');\n      if (accessToken) {\n        console.log('Access Token:', accessToken); // Logging access token\n        Utils.getProfile(accessToken).then(data => {\n          if (data) {\n            console.log('User Profile:', data); // Logging user profile\n            setUserName(data.display_name); // Setting user's name\n            setUserId(data.id); // Set the user's Spotify user ID\n          }\n        }).catch(error => {\n          console.error('Error fetching user profile:', error);\n        });\n      } else {\n        console.error('Access token not found');\n      }\n    }).catch(error => {\n      console.error('Error handling authorization code:', error);\n    });\n  }, []);\n  useEffect(() => {\n    // Effect for setting city and fetching weather data\n    const lastCity = localStorage.getItem('lastCity');\n    if (lastCity) {\n      setCity(lastCity);\n      Utils.fetchWeatherData(lastCity).then(({\n        data,\n        error\n      }) => {\n        if (error) {\n          setErrorMessage(error);\n        } else {\n          setWeatherData(data);\n          setErrorMessage('');\n        }\n      });\n    }\n    const accessToken = localStorage.getItem('access_token');\n    if (accessToken) {\n      Utils.getProfile(accessToken).then(data => {\n        if (data) {\n          setUserName(data.display_name);\n        }\n      }).catch(error => {\n        console.error('Error fetching user profile:', error);\n      });\n    } else {\n      console.error('Access token not found');\n    }\n  }, []);\n  useEffect(() => {\n    // Effect for handling access token and user profile\n    const accessToken = localStorage.getItem('access_token');\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (accessToken) {\n      Utils.getProfile(accessToken, refreshToken).then(data => {\n        if (data) {\n          setUserName(data.display_name);\n          setLoggedIn(true);\n        }\n      }).catch(error => {\n        console.error('Error fetching user profile:', error);\n      });\n    } else {\n      console.error('Access token not found');\n    }\n  }, []);\n  useEffect(() => {\n    // Effect for setting theme\n    document.body.classList.toggle('light-theme', theme === 'light');\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  useEffect(() => {\n    // Effect for handling countdown until next refresh\n    const storedLastRefreshTime = localStorage.getItem('lastRefreshTime');\n    if (storedLastRefreshTime) {\n      const remainingTime = 5 * 60 * 1000 - (Date.now() - parseInt(storedLastRefreshTime));\n      if (remainingTime > 0) {\n        setCountdown(remainingTime);\n        setShowButton(false); // Hide the button when countdown starts\n      }\n    }\n  }, []);\n  useEffect(() => {\n    // Effect for updating countdown timer\n    if (countdown !== null) {\n      const timer = setInterval(() => {\n        setCountdown(prevCountdown => {\n          if (prevCountdown <= 0) {\n            clearInterval(timer);\n            setShowButton(true); // Show the button when countdown ends\n            return 0;\n          } else {\n            return prevCountdown - 1000;\n          }\n        });\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [countdown]);\n  const handleSearch = () => {\n    // Function for handling search\n    Utils.fetchWeatherData(city).then(({\n      data,\n      error\n    }) => {\n      if (error) {\n        setErrorMessage(error);\n      } else {\n        setWeatherData(data);\n        setErrorMessage('');\n        localStorage.setItem('lastCity', city);\n\n        // Check if the countdown is already started\n        if (countdown !== null) {\n          setShowButton(true); // Show the button after search\n        } else {\n          setRefreshCount(0); // Reset refresh count when city is changed\n          setShowButton(true); // Show the button after search\n        }\n      }\n    });\n  };\n  const handleChange = e => {\n    // Function for handling input change\n    setCity(e.target.value);\n  };\n  const handleKeyDown = e => {\n    // Function for handling enter key press\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n  const toggleTheme = () => {\n    // Function for toggling theme\n    setTheme(prevTheme => prevTheme === 'main' ? 'light' : 'main');\n  };\n  const recommendSongs = async () => {\n    // Function for recommending songs\n    try {\n      console.log('Refreshing recommendations...'); // Console log to indicate refreshing recommendations\n      const accessToken = localStorage.getItem('access_token');\n      const weatherGenre = mapWeatherToGenres(weatherData); // Get the mapped genre based on weather\n      const response = await Utils.getRecommendations(accessToken, null, weatherGenre, null);\n      localStorage.setItem('recommendedTracks', JSON.stringify(response.tracks)); // Store recommended tracks in localStorage\n      setRecommendedTracks(response.tracks);\n      localStorage.setItem('lastRefreshTime', Date.now());\n      setLastRefreshTime(Date.now());\n      setRefreshCount(prevCount => prevCount + 1);\n      if (refreshCount + 1 === 5) {\n        setCountdown(5 * 60 * 1000);\n        setShowButton(false); // Hide the button after 5 clicks\n      }\n    } catch (error) {\n      console.error('Error fetching recommended tracks:', error);\n    }\n  };\n  const mapWeatherToGenres = weatherData => {\n    // Function for mapping weather to genres\n    // Map weather conditions to corresponding music genres\n    const weatherCondition = weatherData.weather[0].main.toLowerCase();\n    switch (weatherCondition) {\n      case 'clear':\n        return 'pop';\n      // Example genre for clear weather\n      case 'rain':\n        return 'chill';\n      // Example genre for rainy weather\n      case 'clouds':\n        return 'indie';\n      // Example genre for cloudy weather\n      // Add more cases for other weather conditions as needed\n      default:\n        return 'pop';\n      // Default genre if weather condition doesn't match any specific genre\n    }\n  };\n  const savePlaylist = async () => {\n    // Function for saving playlist\n    try {\n      const accessToken = localStorage.getItem('access_token');\n      if (accessToken && userId && weatherData) {\n        // Make sure weatherData is available\n        // Create playlist\n        const playlistResponse = await createPlaylist(accessToken, userId, weatherData);\n        const playlistId = playlistResponse.id;\n\n        // Add recommended tracks to the playlist\n        await addTracksToPlaylist(accessToken, userId, playlistId, recommendedTracks.map(track => track.uri));\n        console.log('Playlist created and tracks added successfully');\n      } else {\n        console.error('Access token, user ID, or weather data not found');\n      }\n    } catch (error) {\n      console.error('Error saving playlist:', error);\n    }\n  };\n  const createPlaylist = async (accessToken, userId, weatherData) => {\n    // Function for creating playlist\n    const cityName = weatherData.name; // Extract city name from weather data\n    const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n    const formattedDate = `${new Date().getDate().toString().padStart(2, '0')}/${(new Date().getMonth() + 1).toString().padStart(2, '0')}/${new Date().getFullYear()}`;\n    const playlistName = `${cityName}-${weatherCondition}-${formattedDate}`;\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: playlistName,\n        public: true\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create playlist');\n    }\n    return response.json();\n  };\n  const addTracksToPlaylist = async (accessToken, userId, playlistId, trackUris) => {\n    // Function for adding tracks to playlist\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        uris: trackUris\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add tracks to playlist');\n    }\n    return response.json();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter city name\",\n            spellCheck: \"false\",\n            value: city,\n            onChange: handleChange,\n            onKeyDown: handleKeyDown // Enables search by hitting enter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSearch,\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 38\n        }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Cze\\u015B\\u0107, \", userName, \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Weather in \", weatherData.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Condition: \", weatherData.weather[0].main]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature: \", Math.round(weatherData.main.temp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Humidity: \", weatherData.main.humidity, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [!showButton && countdown !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"You used up all of your refreshes. Please wait:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [Math.floor(countdown / 60000), \":\", (countdown % 60000 / 1000).toFixed(0).padStart(2, '0')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 29\n          }, this), showButton && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: recommendSongs,\n            children: \"Refresh recommendations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 29\n          }, this), recommendedTracks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Recommended Songs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: recommendedTracks.map((track, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [track.name, \" - \", track.artists.map(artist => artist.name).join(', ')]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: savePlaylist,\n              children: \"Save Playlist\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"theme-btn\",\n        onClick: toggleTheme,\n        children: \"Theme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), loggedIn ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login with Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"bmLkr3p3C4JzdK+DVhPtLMMSQwU=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Utils","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","city","setCity","weatherData","setWeatherData","errorMessage","setErrorMessage","userName","setUserName","loggedIn","setLoggedIn","theme","setTheme","localStorage","getItem","recommendedTracks","setRecommendedTracks","JSON","parse","userId","setUserId","refreshCount","setRefreshCount","lastRefreshTime","setLastRefreshTime","parseInt","countdown","setCountdown","showButton","setShowButton","handleLogin","authenticate","handleLogout","removeItem","window","location","href","handleAuthorizationCode","then","accessToken","console","log","getProfile","data","display_name","id","catch","error","lastCity","fetchWeatherData","refreshToken","document","body","classList","toggle","setItem","storedLastRefreshTime","remainingTime","Date","now","timer","setInterval","prevCountdown","clearInterval","handleSearch","handleChange","e","target","value","handleKeyDown","key","toggleTheme","prevTheme","recommendSongs","weatherGenre","mapWeatherToGenres","response","getRecommendations","stringify","tracks","prevCount","weatherCondition","weather","main","toLowerCase","savePlaylist","playlistResponse","createPlaylist","playlistId","addTracksToPlaylist","map","track","uri","cityName","name","formattedDate","getDate","toString","padStart","getMonth","getFullYear","playlistName","url","fetch","method","headers","public","ok","Error","json","trackUris","uris","children","className","type","placeholder","spellCheck","onChange","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Math","round","temp","humidity","floor","toFixed","length","index","artists","artist","join","_c","$RefreshReg$"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as Utils from './Utils'; // Import functions from Utils.js\n\nfunction Home() {\n    const [city, setCity] = useState(''); // State for storing the city input\n    const [weatherData, setWeatherData] = useState(null); // State for storing weather data\n    const [errorMessage, setErrorMessage] = useState(''); // State for error messages\n    const [userName, setUserName] = useState(''); // State for storing user's name\n    const [loggedIn, setLoggedIn] = useState(false); // State for user login status\n    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'main'); // State for storing theme\n    const [recommendedTracks, setRecommendedTracks] = useState(() => JSON.parse(localStorage.getItem('recommendedTracks')) || []); // State for storing recommended tracks\n    const [userId, setUserId] = useState(''); // State for storing user's Spotify user ID\n    const [refreshCount, setRefreshCount] = useState(0); // State for storing the refresh count\n    const [lastRefreshTime, setLastRefreshTime] = useState(() => parseInt(localStorage.getItem('lastRefreshTime')) || null); // State for storing the last refresh time\n    const [countdown, setCountdown] = useState(null); // State for countdown until next refresh\n    const [showButton, setShowButton] = useState(true); // State for showing or hiding the refresh button\n\n    const handleLogin = Utils.authenticate; // Function for handling login\n\n    const handleLogout = () => { // Function for handling logout\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        setLoggedIn(false);\n        window.location.href = '/';\n    };\n\n    useEffect(() => { // Effect for handling authorization code\n        Utils.handleAuthorizationCode()\n            .then(() => {\n                const accessToken = localStorage.getItem('access_token');\n                if (accessToken) {\n                    console.log('Access Token:', accessToken); // Logging access token\n                    Utils.getProfile(accessToken)\n                        .then(data => {\n                            if (data) {\n                                console.log('User Profile:', data); // Logging user profile\n                                setUserName(data.display_name); // Setting user's name\n                                setUserId(data.id); // Set the user's Spotify user ID\n                            }\n                        })\n                        .catch(error => {\n                            console.error('Error fetching user profile:', error);\n                        });\n                } else {\n                    console.error('Access token not found');\n                }\n            })\n            .catch(error => {\n                console.error('Error handling authorization code:', error);\n            });\n    }, []);\n\n    useEffect(() => { // Effect for setting city and fetching weather data\n        const lastCity = localStorage.getItem('lastCity');\n        if (lastCity) {\n            setCity(lastCity);\n            Utils.fetchWeatherData(lastCity)\n                .then(({ data, error }) => {\n                    if (error) {\n                        setErrorMessage(error);\n                    } else {\n                        setWeatherData(data);\n                        setErrorMessage('');\n                    }\n                });\n        }\n\n        const accessToken = localStorage.getItem('access_token');\n        if (accessToken) {\n            Utils.getProfile(accessToken)\n                .then(data => {\n                    if (data) {\n                        setUserName(data.display_name);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user profile:', error);\n                });\n        } else {\n            console.error('Access token not found');\n        }\n    }, []);\n\n    useEffect(() => { // Effect for handling access token and user profile\n        const accessToken = localStorage.getItem('access_token');\n        const refreshToken = localStorage.getItem('refresh_token');\n\n        if (accessToken) {\n            Utils.getProfile(accessToken, refreshToken)\n                .then(data => {\n                    if (data) {\n                        setUserName(data.display_name);\n                        setLoggedIn(true);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user profile:', error);\n                });\n        } else {\n            console.error('Access token not found');\n        }\n    }, []);\n\n    useEffect(() => { // Effect for setting theme\n        document.body.classList.toggle('light-theme', theme === 'light');\n        localStorage.setItem('theme', theme);\n    }, [theme]);\n\n    useEffect(() => { // Effect for handling countdown until next refresh\n        const storedLastRefreshTime = localStorage.getItem('lastRefreshTime');\n        if (storedLastRefreshTime) {\n            const remainingTime = 5 * 60 * 1000 - (Date.now() - parseInt(storedLastRefreshTime));\n            if (remainingTime > 0) {\n                setCountdown(remainingTime);\n                setShowButton(false); // Hide the button when countdown starts\n            }\n        }\n    }, []);\n    \n\n    useEffect(() => { // Effect for updating countdown timer\n        if (countdown !== null) {\n            const timer = setInterval(() => {\n                setCountdown(prevCountdown => {\n                    if (prevCountdown <= 0) {\n                        clearInterval(timer);\n                        setShowButton(true); // Show the button when countdown ends\n                        return 0;\n                    } else {\n                        return prevCountdown - 1000;\n                    }\n                });\n            }, 1000);\n            return () => clearInterval(timer);\n        }\n    }, [countdown]);\n\n    const handleSearch = () => { // Function for handling search\n        Utils.fetchWeatherData(city)\n            .then(({ data, error }) => {\n                if (error) {\n                    setErrorMessage(error);\n                } else {\n                    setWeatherData(data);\n                    setErrorMessage('');\n                    localStorage.setItem('lastCity', city);\n    \n                    // Check if the countdown is already started\n                    if (countdown !== null) {\n                        setShowButton(true); // Show the button after search\n                    } else {\n                        setRefreshCount(0); // Reset refresh count when city is changed\n                        setShowButton(true); // Show the button after search\n                    }\n                }\n            });\n    };\n    \n\n    const handleChange = (e) => { // Function for handling input change\n        setCity(e.target.value);\n    };\n\n    const handleKeyDown = (e) => { // Function for handling enter key press\n        if (e.key === 'Enter') {\n            handleSearch();\n        }\n    };\n\n    const toggleTheme = () => { // Function for toggling theme\n        setTheme((prevTheme) => (prevTheme === 'main' ? 'light' : 'main'));\n    };\n\n    const recommendSongs = async () => { // Function for recommending songs\n        try {\n            console.log('Refreshing recommendations...'); // Console log to indicate refreshing recommendations\n            const accessToken = localStorage.getItem('access_token');\n            const weatherGenre = mapWeatherToGenres(weatherData); // Get the mapped genre based on weather\n            const response = await Utils.getRecommendations(accessToken, null, weatherGenre, null);\n            localStorage.setItem('recommendedTracks', JSON.stringify(response.tracks)); // Store recommended tracks in localStorage\n            setRecommendedTracks(response.tracks);\n            localStorage.setItem('lastRefreshTime', Date.now());\n            setLastRefreshTime(Date.now());\n            setRefreshCount(prevCount => prevCount + 1);\n            if (refreshCount + 1 === 5) {\n                setCountdown(5 * 60 * 1000);\n                setShowButton(false); // Hide the button after 5 clicks\n            }\n        } catch (error) {\n            console.error('Error fetching recommended tracks:', error);\n        }\n    };\n\n    const mapWeatherToGenres = (weatherData) => { // Function for mapping weather to genres\n        // Map weather conditions to corresponding music genres\n        const weatherCondition = weatherData.weather[0].main.toLowerCase();\n        switch (weatherCondition) {\n            case 'clear':\n                return 'pop'; // Example genre for clear weather\n            case 'rain':\n                return 'chill'; // Example genre for rainy weather\n            case 'clouds':\n                return 'indie'; // Example genre for cloudy weather\n            // Add more cases for other weather conditions as needed\n            default:\n                return 'pop'; // Default genre if weather condition doesn't match any specific genre\n        }\n    };\n\n    const savePlaylist = async () => { // Function for saving playlist\n        try {\n            const accessToken = localStorage.getItem('access_token');\n            if (accessToken && userId && weatherData) { // Make sure weatherData is available\n                // Create playlist\n                const playlistResponse = await createPlaylist(accessToken, userId, weatherData);\n                const playlistId = playlistResponse.id;\n\n                // Add recommended tracks to the playlist\n                await addTracksToPlaylist(accessToken, userId, playlistId, recommendedTracks.map(track => track.uri));\n\n                console.log('Playlist created and tracks added successfully');\n            } else {\n                console.error('Access token, user ID, or weather data not found');\n            }\n        } catch (error) {\n            console.error('Error saving playlist:', error);\n        }\n    };\n\n    const createPlaylist = async (accessToken, userId, weatherData) => { // Function for creating playlist\n        const cityName = weatherData.name; // Extract city name from weather data\n        const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n        const formattedDate = `${new Date().getDate().toString().padStart(2, '0')}/${(new Date().getMonth() + 1).toString().padStart(2, '0')}/${new Date().getFullYear()}`;\n        const playlistName = `${cityName}-${weatherCondition}-${formattedDate}`;\n\n        const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: playlistName,\n                public: true,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to create playlist');\n        }\n        return response.json();\n    };\n\n    const addTracksToPlaylist = async (accessToken, userId, playlistId, trackUris) => { // Function for adding tracks to playlist\n        const url = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                uris: trackUris,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to add tracks to playlist');\n        }\n        return response.json();\n    };\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"card\">\n                    <div className=\"search\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter city name\"\n                            spellCheck=\"false\"\n                            value={city}\n                            onChange={handleChange}\n                            onKeyDown={handleKeyDown} // Enables search by hitting enter\n                        />\n                        <button onClick={handleSearch}>Search</button>\n                    </div>\n\n                    {errorMessage && <div className=\"error\"><p>{errorMessage}</p></div>}\n                    {weatherData && (\n                        <div className=\"weather\">\n                            <h3>Cześć, {userName}!</h3>\n                            <h2>Weather in {weatherData.name}</h2>\n                            <p>Condition: {weatherData.weather[0].main}</p>\n                            <p>Temperature: {Math.round(weatherData.main.temp)}°C</p>\n                            <p>Humidity: {weatherData.main.humidity}%</p>\n                        </div>\n                    )}\n                    <div className=\"container\">\n                        {!showButton && countdown !== null && (\n                            <div>\n                                <p>You used up all of your refreshes. Please wait:</p>\n                                <p>{Math.floor(countdown / 60000)}:{(countdown % 60000 / 1000).toFixed(0).padStart(2, '0')}</p>\n                            </div>\n                        )}\n                        {showButton && (\n                            <button onClick={recommendSongs}>Refresh recommendations</button>\n                        )}\n                        {recommendedTracks.length > 0 && (\n                            <div>\n                                <h3>Recommended Songs</h3>\n                                <ul>\n                                    {recommendedTracks.map((track, index) => (\n                                        <li key={index}>{track.name} - {track.artists.map(artist => artist.name).join(', ')}</li>\n                                    ))}\n                                </ul>\n                                <button onClick={savePlaylist}>Save Playlist</button>\n                            </div>\n                        )}\n                    </div>\n                </div>\n\n                <button className=\"theme-btn\" onClick={toggleTheme}>Theme</button>\n                {loggedIn ? (\n                    <button onClick={handleLogout}>Logout</button>\n                ) : (\n                    <button onClick={handleLogin}>Login with Spotify</button>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,KAAKC,KAAK,MAAM,SAAS,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACjD,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,MAAMqB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;EACnF,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGxB,QAAQ,CAAC,MAAMyB,IAAI,CAACC,KAAK,CAACL,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EAC/H,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM,CAAC+B,eAAe,EAAEC,kBAAkB,CAAC,GAAGhC,QAAQ,CAAC,MAAMiC,QAAQ,CAACZ,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;EACzH,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACoC,UAAU,EAAEC,aAAa,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEpD,MAAMsC,WAAW,GAAGpC,KAAK,CAACqC,YAAY,CAAC,CAAC;;EAExC,MAAMC,YAAY,GAAGA,CAAA,KAAM;IAAE;IACzBnB,YAAY,CAACoB,UAAU,CAAC,cAAc,CAAC;IACvCpB,YAAY,CAACoB,UAAU,CAAC,eAAe,CAAC;IACxCvB,WAAW,CAAC,KAAK,CAAC;IAClBwB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;EAC9B,CAAC;EAED3C,SAAS,CAAC,MAAM;IAAE;IACdC,KAAK,CAAC2C,uBAAuB,CAAC,CAAC,CAC1BC,IAAI,CAAC,MAAM;MACR,MAAMC,WAAW,GAAG1B,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACxD,IAAIyB,WAAW,EAAE;QACbC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,WAAW,CAAC,CAAC,CAAC;QAC3C7C,KAAK,CAACgD,UAAU,CAACH,WAAW,CAAC,CACxBD,IAAI,CAACK,IAAI,IAAI;UACV,IAAIA,IAAI,EAAE;YACNH,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEE,IAAI,CAAC,CAAC,CAAC;YACpCnC,WAAW,CAACmC,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC;YAChCxB,SAAS,CAACuB,IAAI,CAACE,EAAE,CAAC,CAAC,CAAC;UACxB;QACJ,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZP,OAAO,CAACO,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACxD,CAAC,CAAC;MACV,CAAC,MAAM;QACHP,OAAO,CAACO,KAAK,CAAC,wBAAwB,CAAC;MAC3C;IACJ,CAAC,CAAC,CACDD,KAAK,CAACC,KAAK,IAAI;MACZP,OAAO,CAACO,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC9D,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAENtD,SAAS,CAAC,MAAM;IAAE;IACd,MAAMuD,QAAQ,GAAGnC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAIkC,QAAQ,EAAE;MACV9C,OAAO,CAAC8C,QAAQ,CAAC;MACjBtD,KAAK,CAACuD,gBAAgB,CAACD,QAAQ,CAAC,CAC3BV,IAAI,CAAC,CAAC;QAAEK,IAAI;QAAEI;MAAM,CAAC,KAAK;QACvB,IAAIA,KAAK,EAAE;UACPzC,eAAe,CAACyC,KAAK,CAAC;QAC1B,CAAC,MAAM;UACH3C,cAAc,CAACuC,IAAI,CAAC;UACpBrC,eAAe,CAAC,EAAE,CAAC;QACvB;MACJ,CAAC,CAAC;IACV;IAEA,MAAMiC,WAAW,GAAG1B,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACxD,IAAIyB,WAAW,EAAE;MACb7C,KAAK,CAACgD,UAAU,CAACH,WAAW,CAAC,CACxBD,IAAI,CAACK,IAAI,IAAI;QACV,IAAIA,IAAI,EAAE;UACNnC,WAAW,CAACmC,IAAI,CAACC,YAAY,CAAC;QAClC;MACJ,CAAC,CAAC,CACDE,KAAK,CAACC,KAAK,IAAI;QACZP,OAAO,CAACO,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD,CAAC,CAAC;IACV,CAAC,MAAM;MACHP,OAAO,CAACO,KAAK,CAAC,wBAAwB,CAAC;IAC3C;EACJ,CAAC,EAAE,EAAE,CAAC;EAENtD,SAAS,CAAC,MAAM;IAAE;IACd,MAAM8C,WAAW,GAAG1B,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACxD,MAAMoC,YAAY,GAAGrC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAE1D,IAAIyB,WAAW,EAAE;MACb7C,KAAK,CAACgD,UAAU,CAACH,WAAW,EAAEW,YAAY,CAAC,CACtCZ,IAAI,CAACK,IAAI,IAAI;QACV,IAAIA,IAAI,EAAE;UACNnC,WAAW,CAACmC,IAAI,CAACC,YAAY,CAAC;UAC9BlC,WAAW,CAAC,IAAI,CAAC;QACrB;MACJ,CAAC,CAAC,CACDoC,KAAK,CAACC,KAAK,IAAI;QACZP,OAAO,CAACO,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD,CAAC,CAAC;IACV,CAAC,MAAM;MACHP,OAAO,CAACO,KAAK,CAAC,wBAAwB,CAAC;IAC3C;EACJ,CAAC,EAAE,EAAE,CAAC;EAENtD,SAAS,CAAC,MAAM;IAAE;IACd0D,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,aAAa,EAAE3C,KAAK,KAAK,OAAO,CAAC;IAChEE,YAAY,CAAC0C,OAAO,CAAC,OAAO,EAAE5C,KAAK,CAAC;EACxC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEXlB,SAAS,CAAC,MAAM;IAAE;IACd,MAAM+D,qBAAqB,GAAG3C,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACrE,IAAI0C,qBAAqB,EAAE;MACvB,MAAMC,aAAa,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGlC,QAAQ,CAAC+B,qBAAqB,CAAC,CAAC;MACpF,IAAIC,aAAa,GAAG,CAAC,EAAE;QACnB9B,YAAY,CAAC8B,aAAa,CAAC;QAC3B5B,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;MAC1B;IACJ;EACJ,CAAC,EAAE,EAAE,CAAC;EAGNpC,SAAS,CAAC,MAAM;IAAE;IACd,IAAIiC,SAAS,KAAK,IAAI,EAAE;MACpB,MAAMkC,KAAK,GAAGC,WAAW,CAAC,MAAM;QAC5BlC,YAAY,CAACmC,aAAa,IAAI;UAC1B,IAAIA,aAAa,IAAI,CAAC,EAAE;YACpBC,aAAa,CAACH,KAAK,CAAC;YACpB/B,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YACrB,OAAO,CAAC;UACZ,CAAC,MAAM;YACH,OAAOiC,aAAa,GAAG,IAAI;UAC/B;QACJ,CAAC,CAAC;MACN,CAAC,EAAE,IAAI,CAAC;MACR,OAAO,MAAMC,aAAa,CAACH,KAAK,CAAC;IACrC;EACJ,CAAC,EAAE,CAAClC,SAAS,CAAC,CAAC;EAEf,MAAMsC,YAAY,GAAGA,CAAA,KAAM;IAAE;IACzBtE,KAAK,CAACuD,gBAAgB,CAAChD,IAAI,CAAC,CACvBqC,IAAI,CAAC,CAAC;MAAEK,IAAI;MAAEI;IAAM,CAAC,KAAK;MACvB,IAAIA,KAAK,EAAE;QACPzC,eAAe,CAACyC,KAAK,CAAC;MAC1B,CAAC,MAAM;QACH3C,cAAc,CAACuC,IAAI,CAAC;QACpBrC,eAAe,CAAC,EAAE,CAAC;QACnBO,YAAY,CAAC0C,OAAO,CAAC,UAAU,EAAEtD,IAAI,CAAC;;QAEtC;QACA,IAAIyB,SAAS,KAAK,IAAI,EAAE;UACpBG,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM;UACHP,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;UACpBO,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QACzB;MACJ;IACJ,CAAC,CAAC;EACV,CAAC;EAGD,MAAMoC,YAAY,GAAIC,CAAC,IAAK;IAAE;IAC1BhE,OAAO,CAACgE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMC,aAAa,GAAIH,CAAC,IAAK;IAAE;IAC3B,IAAIA,CAAC,CAACI,GAAG,KAAK,OAAO,EAAE;MACnBN,YAAY,CAAC,CAAC;IAClB;EACJ,CAAC;EAED,MAAMO,WAAW,GAAGA,CAAA,KAAM;IAAE;IACxB3D,QAAQ,CAAE4D,SAAS,IAAMA,SAAS,KAAK,MAAM,GAAG,OAAO,GAAG,MAAO,CAAC;EACtE,CAAC;EAED,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IAAE;IACjC,IAAI;MACAjC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAAC,CAAC;MAC9C,MAAMF,WAAW,GAAG1B,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACxD,MAAM4D,YAAY,GAAGC,kBAAkB,CAACxE,WAAW,CAAC,CAAC,CAAC;MACtD,MAAMyE,QAAQ,GAAG,MAAMlF,KAAK,CAACmF,kBAAkB,CAACtC,WAAW,EAAE,IAAI,EAAEmC,YAAY,EAAE,IAAI,CAAC;MACtF7D,YAAY,CAAC0C,OAAO,CAAC,mBAAmB,EAAEtC,IAAI,CAAC6D,SAAS,CAACF,QAAQ,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;MAC5E/D,oBAAoB,CAAC4D,QAAQ,CAACG,MAAM,CAAC;MACrClE,YAAY,CAAC0C,OAAO,CAAC,iBAAiB,EAAEG,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MACnDnC,kBAAkB,CAACkC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MAC9BrC,eAAe,CAAC0D,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;MAC3C,IAAI3D,YAAY,GAAG,CAAC,KAAK,CAAC,EAAE;QACxBM,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QAC3BE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;MAC1B;IACJ,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC9D;EACJ,CAAC;EAED,MAAM4B,kBAAkB,GAAIxE,WAAW,IAAK;IAAE;IAC1C;IACA,MAAM8E,gBAAgB,GAAG9E,WAAW,CAAC+E,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC;IAClE,QAAQH,gBAAgB;MACpB,KAAK,OAAO;QACR,OAAO,KAAK;MAAE;MAClB,KAAK,MAAM;QACP,OAAO,OAAO;MAAE;MACpB,KAAK,QAAQ;QACT,OAAO,OAAO;MAAE;MACpB;MACA;QACI,OAAO,KAAK;MAAE;IACtB;EACJ,CAAC;EAED,MAAMI,YAAY,GAAG,MAAAA,CAAA,KAAY;IAAE;IAC/B,IAAI;MACA,MAAM9C,WAAW,GAAG1B,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACxD,IAAIyB,WAAW,IAAIpB,MAAM,IAAIhB,WAAW,EAAE;QAAE;QACxC;QACA,MAAMmF,gBAAgB,GAAG,MAAMC,cAAc,CAAChD,WAAW,EAAEpB,MAAM,EAAEhB,WAAW,CAAC;QAC/E,MAAMqF,UAAU,GAAGF,gBAAgB,CAACzC,EAAE;;QAEtC;QACA,MAAM4C,mBAAmB,CAAClD,WAAW,EAAEpB,MAAM,EAAEqE,UAAU,EAAEzE,iBAAiB,CAAC2E,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,GAAG,CAAC,CAAC;QAErGpD,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;MACjE,CAAC,MAAM;QACHD,OAAO,CAACO,KAAK,CAAC,kDAAkD,CAAC;MACrE;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,MAAMwC,cAAc,GAAG,MAAAA,CAAOhD,WAAW,EAAEpB,MAAM,EAAEhB,WAAW,KAAK;IAAE;IACjE,MAAM0F,QAAQ,GAAG1F,WAAW,CAAC2F,IAAI,CAAC,CAAC;IACnC,MAAMb,gBAAgB,GAAG9E,WAAW,CAAC+E,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;IACpE,MAAMW,aAAa,GAAI,GAAE,IAAIrC,IAAI,CAAC,CAAC,CAACsC,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAG,CAAC,IAAIxC,IAAI,CAAC,CAAC,CAACyC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEF,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAG,IAAIxC,IAAI,CAAC,CAAC,CAAC0C,WAAW,CAAC,CAAE,EAAC;IAClK,MAAMC,YAAY,GAAI,GAAER,QAAS,IAAGZ,gBAAiB,IAAGc,aAAc,EAAC;IAEvE,MAAMO,GAAG,GAAI,oCAAmCnF,MAAO,YAAW;IAClE,MAAMyD,QAAQ,GAAG,MAAM2B,KAAK,CAACD,GAAG,EAAE;MAC9BE,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,eAAe,EAAG,UAASlE,WAAY,EAAC;QACxC,cAAc,EAAE;MACpB,CAAC;MACDa,IAAI,EAAEnC,IAAI,CAAC6D,SAAS,CAAC;QACjBgB,IAAI,EAAEO,YAAY;QAClBK,MAAM,EAAE;MACZ,CAAC;IACL,CAAC,CAAC;IACF,IAAI,CAAC9B,QAAQ,CAAC+B,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAChD;IACA,OAAOhC,QAAQ,CAACiC,IAAI,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMpB,mBAAmB,GAAG,MAAAA,CAAOlD,WAAW,EAAEpB,MAAM,EAAEqE,UAAU,EAAEsB,SAAS,KAAK;IAAE;IAChF,MAAMR,GAAG,GAAI,oCAAmCnF,MAAO,cAAaqE,UAAW,SAAQ;IACvF,MAAMZ,QAAQ,GAAG,MAAM2B,KAAK,CAACD,GAAG,EAAE;MAC9BE,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,eAAe,EAAG,UAASlE,WAAY,EAAC;QACxC,cAAc,EAAE;MACpB,CAAC;MACDa,IAAI,EAAEnC,IAAI,CAAC6D,SAAS,CAAC;QACjBiC,IAAI,EAAED;MACV,CAAC;IACL,CAAC,CAAC;IACF,IAAI,CAAClC,QAAQ,CAAC+B,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACvD;IACA,OAAOhC,QAAQ,CAACiC,IAAI,CAAC,CAAC;EAC1B,CAAC;EAED,oBACIjH,OAAA,CAAAE,SAAA;IAAAkH,QAAA,eACIpH,OAAA;MAAKqH,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACtBpH,OAAA;QAAKqH,SAAS,EAAC,MAAM;QAAAD,QAAA,gBACjBpH,OAAA;UAAKqH,SAAS,EAAC,QAAQ;UAAAD,QAAA,gBACnBpH,OAAA;YACIsH,IAAI,EAAC,MAAM;YACXC,WAAW,EAAC,iBAAiB;YAC7BC,UAAU,EAAC,OAAO;YAClBhD,KAAK,EAAEnE,IAAK;YACZoH,QAAQ,EAAEpD,YAAa;YACvBqD,SAAS,EAAEjD,aAAc,CAAC;UAAA;YAAAkD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7B,CAAC,eACF9H,OAAA;YAAQ+H,OAAO,EAAE3D,YAAa;YAAAgD,QAAA,EAAC;UAAM;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC,EAELrH,YAAY,iBAAIT,OAAA;UAAKqH,SAAS,EAAC,OAAO;UAAAD,QAAA,eAACpH,OAAA;YAAAoH,QAAA,EAAI3G;UAAY;YAAAkH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EAClEvH,WAAW,iBACRP,OAAA;UAAKqH,SAAS,EAAC,SAAS;UAAAD,QAAA,gBACpBpH,OAAA;YAAAoH,QAAA,GAAI,mBAAO,EAACzG,QAAQ,EAAC,GAAC;UAAA;YAAAgH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3B9H,OAAA;YAAAoH,QAAA,GAAI,aAAW,EAAC7G,WAAW,CAAC2F,IAAI;UAAA;YAAAyB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACtC9H,OAAA;YAAAoH,QAAA,GAAG,aAAW,EAAC7G,WAAW,CAAC+E,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;UAAA;YAAAoC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC/C9H,OAAA;YAAAoH,QAAA,GAAG,eAAa,EAACY,IAAI,CAACC,KAAK,CAAC1H,WAAW,CAACgF,IAAI,CAAC2C,IAAI,CAAC,EAAC,OAAE;UAAA;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACzD9H,OAAA;YAAAoH,QAAA,GAAG,YAAU,EAAC7G,WAAW,CAACgF,IAAI,CAAC4C,QAAQ,EAAC,GAAC;UAAA;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CACR,eACD9H,OAAA;UAAKqH,SAAS,EAAC,WAAW;UAAAD,QAAA,GACrB,CAACpF,UAAU,IAAIF,SAAS,KAAK,IAAI,iBAC9B9B,OAAA;YAAAoH,QAAA,gBACIpH,OAAA;cAAAoH,QAAA,EAAG;YAA+C;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eACtD9H,OAAA;cAAAoH,QAAA,GAAIY,IAAI,CAACI,KAAK,CAACtG,SAAS,GAAG,KAAK,CAAC,EAAC,GAAC,EAAC,CAACA,SAAS,GAAG,KAAK,GAAG,IAAI,EAAEuG,OAAO,CAAC,CAAC,CAAC,CAAC/B,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;YAAA;cAAAqB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9F,CACR,EACA9F,UAAU,iBACPhC,OAAA;YAAQ+H,OAAO,EAAElD,cAAe;YAAAuC,QAAA,EAAC;UAAuB;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACnE,EACA3G,iBAAiB,CAACmH,MAAM,GAAG,CAAC,iBACzBtI,OAAA;YAAAoH,QAAA,gBACIpH,OAAA;cAAAoH,QAAA,EAAI;YAAiB;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC1B9H,OAAA;cAAAoH,QAAA,EACKjG,iBAAiB,CAAC2E,GAAG,CAAC,CAACC,KAAK,EAAEwC,KAAK,kBAChCvI,OAAA;gBAAAoH,QAAA,GAAiBrB,KAAK,CAACG,IAAI,EAAC,KAAG,EAACH,KAAK,CAACyC,OAAO,CAAC1C,GAAG,CAAC2C,MAAM,IAAIA,MAAM,CAACvC,IAAI,CAAC,CAACwC,IAAI,CAAC,IAAI,CAAC;cAAA,GAA1EH,KAAK;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAA0E,CAC3F;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,eACL9H,OAAA;cAAQ+H,OAAO,EAAEtC,YAAa;cAAA2B,QAAA,EAAC;YAAa;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD,CACR;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAEN9H,OAAA;QAAQqH,SAAS,EAAC,WAAW;QAACU,OAAO,EAAEpD,WAAY;QAAAyC,QAAA,EAAC;MAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACjEjH,QAAQ,gBACLb,OAAA;QAAQ+H,OAAO,EAAE3F,YAAa;QAAAgF,QAAA,EAAC;MAAM;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,gBAE9C9H,OAAA;QAAQ+H,OAAO,EAAE7F,WAAY;QAAAkF,QAAA,EAAC;MAAkB;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAC3D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC,gBACR,CAAC;AAEX;AAAC1H,EAAA,CAvUQD,IAAI;AAAAwI,EAAA,GAAJxI,IAAI;AAyUb,eAAeA,IAAI;AAAC,IAAAwI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}