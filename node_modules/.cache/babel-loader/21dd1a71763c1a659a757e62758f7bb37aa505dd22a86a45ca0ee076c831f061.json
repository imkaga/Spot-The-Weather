{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Zmienne\nexport const apiKey = \"85f93b7e11258cb2617c3f745ecf3349\"; // Api Key OpenWeather\nexport const apiUrl = \"https://api.openweathermap.org/data/2.5/weather?&units=metric&q=\"; // Api URL OpenWeather\n// Spotify API\nexport const clientId = '44c1aa3e0f954b9491bb515284729f0b'; // ClientID Spotify\nexport const redirectUri = 'http://localhost:3000/'; // Redirect URL\nexport const clientSecret = '343770fe2dcc4167acd9722f8c3424d9'; //Client Secret Spotify\n//Notatka dla siebie - dodać tutaj później API itd od spotify :)\n\n// Function to handle authentication flow\nasync function authenticate() {\n  // const clientId = '44c1aa3e0f954b9491bb515284729f0b'; // Już dodane powyżej\n  // const redirectUri = 'http://localhost:3000/'; // Już dodane powyżej\n  const scopes = ['user-read-private', 'user-read-email']; // Add necessary scopes\n\n  // Redirect user to Spotify authorization endpoint\n  window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=code`;\n}\n\n// Funkcja logowania \nasync function handleAuthorizationCode() {\n  const params = new URLSearchParams(window.location.search);\n  const authorizationCode = params.get('code');\n  if (authorizationCode) {\n    try {\n      const response = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n        },\n        body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${redirectUri}`\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to exchange authorization code for access token. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      const accessToken = data.access_token;\n      if (!accessToken) {\n        throw new Error('Access token not found in response');\n      }\n      localStorage.setItem('access_token', accessToken);\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Error exchanging authorization code:', error);\n    }\n  }\n}\n\n// Funkcja do pobierania accessTokena użytkownika\nexport async function getProfile(accessToken, refreshToken) {\n  try {\n    // Fetch user's profile using Spotify access token\n    const response = await fetch('https://api.spotify.com/v1/me', {\n      headers: {\n        Authorization: 'Bearer ' + accessToken\n      }\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    // If the access token is expired, refresh it and try again\n    if (error.message === \"Unauthorized\") {\n      try {\n        const newAccessToken = await refreshAccessToken(refreshToken);\n        // Store the new access token in local storage\n        localStorage.setItem('access_token', newAccessToken);\n        // Retry fetching user's profile with the new access token\n        return getProfile(newAccessToken, refreshToken);\n      } catch (refreshError) {\n        console.error('Error refreshing access token:', refreshError);\n        throw refreshError;\n      }\n    } else {\n      throw error;\n    }\n  }\n}\n\n// Funkcja do odświeania access tokena użytkownika\nexport async function refreshAccessToken(refreshToken) {\n  const clientCredentials = btoa('44c1aa3e0f954b9491bb515284729f0b' + ':' + '343770fe2dcc4167acd9722f8c3424d9');\n  const spotifyTokenResponse = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${clientCredentials}`\n    },\n    body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n    cache: \"no-cache\"\n  });\n  const spotifyTokenData = await spotifyTokenResponse.json();\n  return spotifyTokenData.access_token;\n}\nfunction Home() {\n  _s();\n  const [city, setCity] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [userName, setUserName] = useState('');\n  const [loggedIn, setLoggedIn] = useState(false); // State variable to track login status\n  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'main'); // Initialize theme from localStorage or default to 'main'\n\n  const handleLogin = () => {\n    window.location.href = 'https://accounts.spotify.com/authorize' + '?response_type=code' + '&client_id=' + clientId +\n    // Using the defined clientId variable\n    '&redirect_uri=' + redirectUri +\n    // Using the defined redirectUri variable\n    '&scope=user-read-private%20user-read-email'; // Adjust scopes as per your application's requirements\n  };\n  const handleLogout = () => {\n    // Clear access token and refresh token from local storage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    // Update loggedIn state\n    setLoggedIn(false);\n    // Redirect to home page or any other desired page\n    window.location.href = '/';\n  };\n\n  // Call handleAuthorizationCode when your component mounts\n  useEffect(() => {\n    handleAuthorizationCode();\n  }, []);\n  useEffect(() => {\n    const lastCity = localStorage.getItem('lastCity');\n    if (lastCity) {\n      setCity(lastCity);\n      fetchWeatherData(lastCity);\n    }\n\n    // Log the access token from local storage\n    console.log('Access Token from Local Storage:', localStorage.getItem('access_token'));\n\n    // Fetch user's profile from Spotify after component mounts\n    const accessToken = localStorage.getItem('access_token');\n    if (accessToken) {\n      console.log('Access Token:', accessToken); // Log the access token\n\n      // Fetch user profile\n      getProfile(accessToken).then(data => {\n        if (data) {\n          console.log('User Profile:', data); // Log the user's profile data\n          setUserName(data.display_name); // Update the userName state\n        }\n      }).catch(error => {\n        console.error('Error fetching user profile:', error);\n      });\n    } else {\n      console.error('Access token not found');\n    }\n  }, []);\n  useEffect(() => {\n    const accessToken = localStorage.getItem('access_token');\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (accessToken) {\n      getProfile(accessToken, refreshToken).then(data => {\n        if (data) {\n          setUserName(data.display_name);\n          setLoggedIn(true); // Set loggedIn to true when user is logged in\n        }\n      }).catch(error => {\n        console.error('Error fetching user profile:', error);\n      });\n    } else {\n      console.error('Access token not found');\n    }\n  }, []);\n\n  // Efekt dotyczący zmiany motywu \n  useEffect(() => {\n    document.body.classList.toggle('light-theme', theme === 'light'); // Apply 'light-theme' class based on theme state\n    localStorage.setItem('theme', theme); // Store current theme in localStorage\n  }, [theme]);\n  const fetchWeatherData = async city => {\n    try {\n      const response = await fetch(apiUrl + city + `&appid=${apiKey}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setWeatherData(data);\n      setErrorMessage('');\n      localStorage.setItem('lastCity', city); // Zapisz ostatnie wyszukiwane miasto\n    } catch (error) {\n      console.error(error);\n      setWeatherData(null);\n      setErrorMessage('Error fetching weather data. Please try again later.');\n    }\n  };\n  const handleSearch = () => {\n    fetchWeatherData(city);\n  };\n  const handleChange = e => {\n    setCity(e.target.value);\n  };\n\n  // Zmienna pozwalająca na wyszukiwanie przy użyciu entera\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  // Zmienna zapisująca wcześniej wybrany motyw. Po odświeżeniu strony, motyw jest zachowany.\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'main' ? 'light' : 'main'); // Toggle theme between 'main' and 'light'\n  };\n}\n\n// Function to fetch user's top artists from Spotify API\n_s(Home, \"A++mbAuWhxsHTa/3WbcBVYLp/Co=\");\n_c = Home;\nexport async function getTopArtists(accessToken) {\n  const url = 'https://api.spotify.com/v1/me/top/artists?limit=5';\n  const response = await fetch(url, {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch top artists');\n  }\n  const data = await response.json();\n  return data;\n}\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","apiKey","apiUrl","clientId","redirectUri","clientSecret","authenticate","scopes","window","location","href","join","handleAuthorizationCode","params","URLSearchParams","search","authorizationCode","get","response","fetch","method","headers","Authorization","btoa","body","ok","Error","status","data","json","accessToken","access_token","localStorage","setItem","error","console","getProfile","refreshToken","message","newAccessToken","refreshAccessToken","refreshError","clientCredentials","spotifyTokenResponse","cache","spotifyTokenData","Home","_s","city","setCity","weatherData","setWeatherData","errorMessage","setErrorMessage","userName","setUserName","loggedIn","setLoggedIn","theme","setTheme","getItem","handleLogin","handleLogout","removeItem","lastCity","fetchWeatherData","log","then","display_name","catch","document","classList","toggle","handleSearch","handleChange","e","target","value","handleKeyDown","key","toggleTheme","prevTheme","_c","getTopArtists","url","$RefreshReg$"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Utils.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Zmienne\nexport const apiKey = \"85f93b7e11258cb2617c3f745ecf3349\"; // Api Key OpenWeather\nexport const apiUrl = \"https://api.openweathermap.org/data/2.5/weather?&units=metric&q=\"; // Api URL OpenWeather\n// Spotify API\nexport const clientId = '44c1aa3e0f954b9491bb515284729f0b'; // ClientID Spotify\nexport const redirectUri = 'http://localhost:3000/'; // Redirect URL\nexport const clientSecret = '343770fe2dcc4167acd9722f8c3424d9'; //Client Secret Spotify\n//Notatka dla siebie - dodać tutaj później API itd od spotify :)\n\n// Function to handle authentication flow\nasync function authenticate() {\n    // const clientId = '44c1aa3e0f954b9491bb515284729f0b'; // Już dodane powyżej\n    // const redirectUri = 'http://localhost:3000/'; // Już dodane powyżej\n    const scopes = ['user-read-private', 'user-read-email']; // Add necessary scopes\n\n    // Redirect user to Spotify authorization endpoint\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=code`;\n}\n\n// Funkcja logowania \nasync function handleAuthorizationCode() {\n    const params = new URLSearchParams(window.location.search);\n    const authorizationCode = params.get('code');\n\n    if (authorizationCode) {\n        try {\n            const response = await fetch('https://accounts.spotify.com/api/token', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n                },\n                body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${redirectUri}`\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to exchange authorization code for access token. Status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            const accessToken = data.access_token;\n\n            if (!accessToken) {\n                throw new Error('Access token not found in response');\n            }\n\n            localStorage.setItem('access_token', accessToken);\n            window.location.href = '/';\n        } catch (error) {\n            console.error('Error exchanging authorization code:', error);\n        }\n    }\n}\n\n\n// Funkcja do pobierania accessTokena użytkownika\nexport async function getProfile(accessToken, refreshToken) {\n    try {\n        // Fetch user's profile using Spotify access token\n        const response = await fetch('https://api.spotify.com/v1/me', {\n            headers: {\n                Authorization: 'Bearer ' + accessToken\n            }\n        });\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        // If the access token is expired, refresh it and try again\n        if (error.message === \"Unauthorized\") {\n            try {\n                const newAccessToken = await refreshAccessToken(refreshToken);\n                // Store the new access token in local storage\n                localStorage.setItem('access_token', newAccessToken);\n                // Retry fetching user's profile with the new access token\n                return getProfile(newAccessToken, refreshToken);\n            } catch (refreshError) {\n                console.error('Error refreshing access token:', refreshError);\n                throw refreshError;\n            }\n        } else {\n            throw error;\n        }\n    }\n}\n\n// Funkcja do odświeania access tokena użytkownika\nexport async function refreshAccessToken(refreshToken) {\n    const clientCredentials = btoa('44c1aa3e0f954b9491bb515284729f0b' + ':' + '343770fe2dcc4167acd9722f8c3424d9');\n    const spotifyTokenResponse = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: `Basic ${clientCredentials}`,\n        },\n        body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n        cache: \"no-cache\"\n    });\n\n    const spotifyTokenData = await spotifyTokenResponse.json();\n    return spotifyTokenData.access_token;\n}\n\nfunction Home() {\n    const [city, setCity] = useState('');\n    const [weatherData, setWeatherData] = useState(null);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [userName, setUserName] = useState('');\n    const [loggedIn, setLoggedIn] = useState(false); // State variable to track login status\n    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'main'); // Initialize theme from localStorage or default to 'main'\n\n    const handleLogin = () => {\n        window.location.href = 'https://accounts.spotify.com/authorize' +\n          '?response_type=code' +\n          '&client_id=' + clientId + // Using the defined clientId variable\n          '&redirect_uri=' + redirectUri + // Using the defined redirectUri variable\n          '&scope=user-read-private%20user-read-email'; // Adjust scopes as per your application's requirements\n      };\n\n      const handleLogout = () => {\n        // Clear access token and refresh token from local storage\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        // Update loggedIn state\n        setLoggedIn(false);\n        // Redirect to home page or any other desired page\n        window.location.href = '/';\n    };\n\n    // Call handleAuthorizationCode when your component mounts\n    useEffect(() => {\n    handleAuthorizationCode();\n    }, []);\n\n    useEffect(() => {\n        const lastCity = localStorage.getItem('lastCity');\n        if (lastCity) {\n            setCity(lastCity);\n            fetchWeatherData(lastCity);\n        }\n\n        // Log the access token from local storage\n        console.log('Access Token from Local Storage:', localStorage.getItem('access_token'));\n\n        // Fetch user's profile from Spotify after component mounts\n        const accessToken = localStorage.getItem('access_token');\n        if (accessToken) {\n            console.log('Access Token:', accessToken); // Log the access token\n\n            // Fetch user profile\n            getProfile(accessToken)\n                .then(data => {\n                    if (data) {\n                        console.log('User Profile:', data); // Log the user's profile data\n                        setUserName(data.display_name); // Update the userName state\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user profile:', error);\n                });\n        } else {\n            console.error('Access token not found');\n        }\n    }, []);\n\n    useEffect(() => {\n        const accessToken = localStorage.getItem('access_token');\n        const refreshToken = localStorage.getItem('refresh_token');\n    \n        if (accessToken) {\n            getProfile(accessToken, refreshToken)\n                .then(data => {\n                    if (data) {\n                        setUserName(data.display_name);\n                        setLoggedIn(true); // Set loggedIn to true when user is logged in\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user profile:', error);\n                });\n        } else {\n            console.error('Access token not found');\n        }\n    }, [])\n\n\n    // Efekt dotyczący zmiany motywu \n    useEffect(() => {\n        document.body.classList.toggle('light-theme', theme === 'light'); // Apply 'light-theme' class based on theme state\n        localStorage.setItem('theme', theme); // Store current theme in localStorage\n    }, [theme]);\n\n    const fetchWeatherData = async (city) => {\n        try {\n            const response = await fetch(apiUrl + city + `&appid=${apiKey}`);\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            const data = await response.json();\n            setWeatherData(data);\n            setErrorMessage('');\n            localStorage.setItem('lastCity', city); // Zapisz ostatnie wyszukiwane miasto\n        } catch (error) {\n            console.error(error);\n            setWeatherData(null);\n            setErrorMessage('Error fetching weather data. Please try again later.');\n        }\n    };\n\n    const handleSearch = () => {\n        fetchWeatherData(city);\n    };\n\n    const handleChange = (e) => {\n        setCity(e.target.value);\n    };\n\n    // Zmienna pozwalająca na wyszukiwanie przy użyciu entera\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            handleSearch();\n        }\n    };\n\n    // Zmienna zapisująca wcześniej wybrany motyw. Po odświeżeniu strony, motyw jest zachowany.\n    const toggleTheme = () => {\n        setTheme(prevTheme => (prevTheme === 'main' ? 'light' : 'main')); // Toggle theme between 'main' and 'light'\n    };}\n\n    \n\n// Function to fetch user's top artists from Spotify API\nexport async function getTopArtists(accessToken) {\n    const url = 'https://api.spotify.com/v1/me/top/artists?limit=5';\n    const response = await fetch(url, {\n        headers: {\n            'Authorization': `Bearer ${accessToken}`\n        }\n    });\n    if (!response.ok) {\n        throw new Error('Failed to fetch top artists');\n    }\n    const data = await response.json();\n    return data;\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}