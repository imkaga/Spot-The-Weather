{"ast":null,"code":"import { openWeatherApiKey, openWeatherApiUrl, spotifyClientId, spotifyClientSecret, spotifyRedirectUri } from './ApiKeys';\nexport const apiKey = openWeatherApiKey;\nexport const clientId = spotifyClientId;\nexport const clientSecret = spotifyClientSecret;\nexport const redirectUri = spotifyRedirectUri;\nexport const apiUrl = openWeatherApiUrl;\nexport async function authenticate() {\n  // Function to handle authentication flow\n  // Redirect user to Spotify authorization endpoint\n  const scopes = ['user-read-private', 'user-read-email']; // Add necessary scopes\n  window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=code`;\n}\nexport async function handleAuthorizationCode() {\n  // Function to handle authorization code\n  const params = new URLSearchParams(window.location.search);\n  const authorizationCode = params.get('code');\n  if (authorizationCode) {\n    try {\n      const response = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n        },\n        body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${redirectUri}`\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to exchange authorization code for access token. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      const accessToken = data.access_token;\n      if (!accessToken) {\n        throw new Error('Access token not found in response');\n      }\n      localStorage.setItem('access_token', accessToken);\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Error exchanging authorization code:', error);\n    }\n  }\n}\nexport async function getProfile(accessToken, refreshToken) {\n  // Function to fetch user's profile\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me', {\n      headers: {\n        Authorization: 'Bearer ' + accessToken\n      }\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    // If the access token is expired, refresh it and try again\n    if (error.message === \"Unauthorized\") {\n      try {\n        const newAccessToken = await refreshAccessToken(refreshToken);\n        localStorage.setItem('access_token', newAccessToken);\n        return getProfile(newAccessToken, refreshToken);\n      } catch (refreshError) {\n        console.error('Error refreshing access token:', refreshError);\n        throw refreshError;\n      }\n    } else {\n      throw error;\n    }\n  }\n}\nexport async function refreshAccessToken(refreshToken) {\n  // Function to refresh access token\n  const clientCredentials = btoa(`${clientId}:${clientSecret}`);\n  const spotifyTokenResponse = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${clientCredentials}`\n    },\n    body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n    cache: \"no-cache\"\n  });\n  const spotifyTokenData = await spotifyTokenResponse.json();\n  return spotifyTokenData.access_token;\n}\nexport async function getTopArtists(accessToken) {\n  // Function to fetch user's top artists\n  const url = 'https://api.spotify.com/v1/me/top/artists?limit=5';\n  const response = await fetch(url, {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch top artists');\n  }\n  const data = await response.json();\n  return data;\n}","map":{"version":3,"names":["openWeatherApiKey","openWeatherApiUrl","spotifyClientId","spotifyClientSecret","spotifyRedirectUri","apiKey","clientId","clientSecret","redirectUri","apiUrl","authenticate","scopes","window","location","href","join","handleAuthorizationCode","params","URLSearchParams","search","authorizationCode","get","response","fetch","method","headers","Authorization","btoa","body","ok","Error","status","data","json","accessToken","access_token","localStorage","setItem","error","console","getProfile","refreshToken","message","newAccessToken","refreshAccessToken","refreshError","clientCredentials","spotifyTokenResponse","cache","spotifyTokenData","getTopArtists","url"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Utils.js"],"sourcesContent":["import { openWeatherApiKey, openWeatherApiUrl, spotifyClientId, spotifyClientSecret, spotifyRedirectUri } from './ApiKeys';\n\nexport const apiKey = openWeatherApiKey;\nexport const clientId = spotifyClientId;\nexport const clientSecret = spotifyClientSecret;\nexport const redirectUri = spotifyRedirectUri;\nexport const apiUrl = openWeatherApiUrl;\n\nexport async function authenticate() {\n    // Function to handle authentication flow\n    // Redirect user to Spotify authorization endpoint\n    const scopes = ['user-read-private', 'user-read-email']; // Add necessary scopes\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=code`;\n}\n\nexport async function handleAuthorizationCode() {\n    // Function to handle authorization code\n    const params = new URLSearchParams(window.location.search);\n    const authorizationCode = params.get('code');\n\n    if (authorizationCode) {\n        try {\n            const response = await fetch('https://accounts.spotify.com/api/token', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n                },\n                body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${redirectUri}`\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to exchange authorization code for access token. Status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            const accessToken = data.access_token;\n\n            if (!accessToken) {\n                throw new Error('Access token not found in response');\n            }\n\n            localStorage.setItem('access_token', accessToken);\n            window.location.href = '/';\n        } catch (error) {\n            console.error('Error exchanging authorization code:', error);\n        }\n    }\n}\n\nexport async function getProfile(accessToken, refreshToken) {\n    // Function to fetch user's profile\n    try {\n        const response = await fetch('https://api.spotify.com/v1/me', {\n            headers: {\n                Authorization: 'Bearer ' + accessToken\n            }\n        });\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        // If the access token is expired, refresh it and try again\n        if (error.message === \"Unauthorized\") {\n            try {\n                const newAccessToken = await refreshAccessToken(refreshToken);\n                localStorage.setItem('access_token', newAccessToken);\n                return getProfile(newAccessToken, refreshToken);\n            } catch (refreshError) {\n                console.error('Error refreshing access token:', refreshError);\n                throw refreshError;\n            }\n        } else {\n            throw error;\n        }\n    }\n}\n\nexport async function refreshAccessToken(refreshToken) {\n    // Function to refresh access token\n    const clientCredentials = btoa(`${clientId}:${clientSecret}`);\n    const spotifyTokenResponse = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: `Basic ${clientCredentials}`,\n        },\n        body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n        cache: \"no-cache\"\n    });\n\n    const spotifyTokenData = await spotifyTokenResponse.json();\n    return spotifyTokenData.access_token;\n}\n\nexport async function getTopArtists(accessToken) {\n    // Function to fetch user's top artists\n    const url = 'https://api.spotify.com/v1/me/top/artists?limit=5';\n    const response = await fetch(url, {\n        headers: {\n            'Authorization': `Bearer ${accessToken}`\n        }\n    });\n    if (!response.ok) {\n        throw new Error('Failed to fetch top artists');\n    }\n    const data = await response.json();\n    return data;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}