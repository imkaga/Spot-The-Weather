{"ast":null,"code":"var _jsxFileName = \"/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as Utils from './Utils'; // Import functions from Utils.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [city, setCity] = useState(''); // State for storing the city input\n  const [weatherData, setWeatherData] = useState(null); // State for storing weather data\n  const [errorMessage, setErrorMessage] = useState(''); // State for error messages\n  const [userName, setUserName] = useState(''); // State for storing user's name\n  const [loggedIn, setLoggedIn] = useState(false); // State for user login status\n  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'main'); // State for storing theme\n  const [recommendedTracks, setRecommendedTracks] = useState([]); // State for storing recommended tracks\n  const [userId, setUserId] = useState(''); // State for storing user's Spotify user ID\n  const [userLocation, setUserLocation] = useState(null); // State for storing user's location\n\n  const handleLogin = Utils.authenticate; // Function for handling login\n\n  const handleLogout = () => {\n    // Function for handling logout\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    setLoggedIn(false);\n    window.location.href = '/';\n  };\n  useEffect(() => {\n    // Effect for handling authorization code\n    Utils.handleAuthorizationCode().then(() => {\n      const accessToken = localStorage.getItem('access_token');\n      if (accessToken) {\n        console.log('Access Token:', accessToken); // Logging access token\n        Utils.getProfile(accessToken).then(data => {\n          if (data) {\n            console.log('User Profile:', data); // Logging user profile\n            setUserName(data.display_name); // Setting user's name\n            setUserId(data.id); // Set the user's Spotify user ID\n          }\n        }).catch(error => {\n          console.error('Error fetching user profile:', error);\n        });\n      } else {\n        console.error('Access token not found');\n      }\n    }).catch(error => {\n      console.error('Error handling authorization code:', error);\n    });\n  }, []);\n  useEffect(() => {\n    // Effect for setting city and fetching weather data\n    const lastCity = localStorage.getItem('lastCity');\n    if (lastCity) {\n      setCity(lastCity);\n      Utils.fetchWeatherData(lastCity).then(({\n        data,\n        error\n      }) => {\n        if (error) {\n          setErrorMessage(error);\n        } else {\n          setWeatherData(data);\n          setErrorMessage('');\n        }\n      });\n    }\n    const accessToken = localStorage.getItem('access_token');\n    if (accessToken) {\n      Utils.getProfile(accessToken).then(data => {\n        if (data) {\n          setUserName(data.display_name);\n        }\n      }).catch(error => {\n        console.error('Error fetching user profile:', error);\n      });\n    } else {\n      console.error('Access token not found');\n    }\n  }, []);\n  useEffect(() => {\n    // Effect for handling access token and user profile\n    const accessToken = localStorage.getItem('access_token');\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (accessToken) {\n      Utils.getProfile(accessToken, refreshToken).then(data => {\n        if (data) {\n          setUserName(data.display_name);\n          setLoggedIn(true);\n        }\n      }).catch(error => {\n        console.error('Error fetching user profile:', error);\n      });\n    } else {\n      console.error('Access token not found');\n    }\n  }, []);\n  useEffect(() => {\n    // Effect for setting theme\n    document.body.classList.toggle('light-theme', theme === 'light');\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  const handleSearch = () => {\n    // Function for handling search\n    Utils.fetchWeatherData(city).then(({\n      data,\n      error\n    }) => {\n      if (error) {\n        setErrorMessage(error);\n      } else {\n        setWeatherData(data);\n        setErrorMessage('');\n        localStorage.setItem('lastCity', city);\n      }\n    });\n  };\n  const handleChange = e => {\n    // Function for handling input change\n    setCity(e.target.value);\n  };\n  const handleKeyDown = e => {\n    // Function for handling enter key press\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n  const toggleTheme = () => {\n    // Function for toggling theme\n    setTheme(prevTheme => prevTheme === 'main' ? 'light' : 'main');\n  };\n  const recommendSongs = async () => {\n    try {\n      const accessToken = localStorage.getItem('access_token');\n      const weatherGenre = mapWeatherToGenres(weatherData); // Get the mapped genre based on weather\n      const response = await Utils.getRecommendations(accessToken, null, weatherGenre, null);\n      setRecommendedTracks(response.tracks);\n    } catch (error) {\n      console.error('Error fetching recommended tracks:', error);\n    }\n  };\n  const mapWeatherToGenres = weatherData => {\n    // Map weather conditions to corresponding music genres\n    const weatherCondition = weatherData.weather[0].main.toLowerCase();\n    switch (weatherCondition) {\n      case 'clear':\n        return 'pop';\n      // Example genre for clear weather\n      case 'rain':\n        return 'chill';\n      // Example genre for rainy weather\n      case 'clouds':\n        return 'indie';\n      // Example genre for cloudy weather\n      // Add more cases for other weather conditions as needed\n      default:\n        return 'pop';\n      // Default genre if weather condition doesn't match any specific genre\n    }\n  };\n  useEffect(() => {\n    // Effect for handling search and recommending songs\n    if (weatherData) {\n      recommendSongs();\n    }\n  }, [weatherData]);\n\n  // Function to create playlist and add recommended songs\n  const savePlaylist = async () => {\n    try {\n      const accessToken = localStorage.getItem('access_token');\n      if (accessToken && userId && weatherData) {\n        // Make sure weatherData is available\n        // Create playlist\n        const playlistResponse = await createPlaylist(accessToken, userId, weatherData);\n        const playlistId = playlistResponse.id;\n\n        // Add recommended tracks to the playlist\n        await addTracksToPlaylist(accessToken, userId, playlistId, recommendedTracks.map(track => track.uri));\n        console.log('Playlist created and tracks added successfully');\n      } else {\n        console.error('Access token, user ID, or weather data not found');\n      }\n    } catch (error) {\n      console.error('Error saving playlist:', error);\n    }\n  };\n  const createPlaylist = async (accessToken, userId, weatherData) => {\n    const cityName = weatherData.name; // Extract city name from weather data\n    const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n    const formattedDate = `${new Date().getDate().toString().padStart(2, '0')}/${(new Date().getMonth() + 1).toString().padStart(2, '0')}/${new Date().getFullYear()}`;\n    const playlistName = `${cityName}-${weatherCondition}-${formattedDate}`;\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: playlistName,\n        public: true\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create playlist');\n    }\n    return response.json();\n  };\n  const addTracksToPlaylist = async (accessToken, userId, playlistId, trackUris) => {\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        uris: trackUris\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add tracks to playlist');\n    }\n    return response.json();\n  };\n  useEffect(() => {\n    // Fetch user's location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        // Get latitude and longitude\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n\n        // Fetch city based on coordinates\n        fetchCityFromCoordinates(latitude, longitude);\n      }, error => {\n        console.error('Error getting user location:', error);\n      });\n    } else {\n      console.error('Geolocation is not supported by this browser.');\n    }\n  }, []);\n  const fetchCityFromCoordinates = async (latitude, longitude) => {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${Utils.apiKey}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setCity(data.name); // Set the city based on coordinates\n      setUserLocation({\n        latitude,\n        longitude\n      }); // Store user's location\n    } catch (error) {\n      console.error('Error fetching city from coordinates:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter city name\",\n            spellCheck: \"false\",\n            value: city,\n            onChange: handleChange,\n            onKeyDown: handleKeyDown // Enables search by hitting enter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSearch,\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 38\n        }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Cze\\u015B\\u0107, \", userName, \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Weather in \", weatherData.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Condition: \", weatherData.weather[0].main]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature: \", Math.round(weatherData.main.temp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Humidity: \", weatherData.main.humidity, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Wind Speed: \", weatherData.wind.speed, \" km/h\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: recommendSongs,\n            children: \"Recommend Songs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 21\n          }, this), recommendedTracks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Recommended Songs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: recommendedTracks.map((track, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [track.name, \" - \", track.artists.map(artist => artist.name).join(', ')]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: savePlaylist,\n              children: \"Save Playlist\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"theme-btn\",\n        onClick: toggleTheme,\n        children: \"Theme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), loggedIn ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login with Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"XFmbWOQCtfMvFvrjvvjanzeFoA4=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Utils","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","city","setCity","weatherData","setWeatherData","errorMessage","setErrorMessage","userName","setUserName","loggedIn","setLoggedIn","theme","setTheme","localStorage","getItem","recommendedTracks","setRecommendedTracks","userId","setUserId","userLocation","setUserLocation","handleLogin","authenticate","handleLogout","removeItem","window","location","href","handleAuthorizationCode","then","accessToken","console","log","getProfile","data","display_name","id","catch","error","lastCity","fetchWeatherData","refreshToken","document","body","classList","toggle","setItem","handleSearch","handleChange","e","target","value","handleKeyDown","key","toggleTheme","prevTheme","recommendSongs","weatherGenre","mapWeatherToGenres","response","getRecommendations","tracks","weatherCondition","weather","main","toLowerCase","savePlaylist","playlistResponse","createPlaylist","playlistId","addTracksToPlaylist","map","track","uri","cityName","name","formattedDate","Date","getDate","toString","padStart","getMonth","getFullYear","playlistName","url","fetch","method","headers","JSON","stringify","public","ok","Error","json","trackUris","uris","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","fetchCityFromCoordinates","apiKey","status","children","className","type","placeholder","spellCheck","onChange","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Math","round","temp","humidity","wind","speed","length","index","artists","artist","join","_c","$RefreshReg$"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as Utils from './Utils'; // Import functions from Utils.js\n\nfunction Home() {\n    const [city, setCity] = useState(''); // State for storing the city input\n    const [weatherData, setWeatherData] = useState(null); // State for storing weather data\n    const [errorMessage, setErrorMessage] = useState(''); // State for error messages\n    const [userName, setUserName] = useState(''); // State for storing user's name\n    const [loggedIn, setLoggedIn] = useState(false); // State for user login status\n    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'main'); // State for storing theme\n    const [recommendedTracks, setRecommendedTracks] = useState([]); // State for storing recommended tracks\n    const [userId, setUserId] = useState(''); // State for storing user's Spotify user ID\n    const [userLocation, setUserLocation] = useState(null); // State for storing user's location\n\n    \n\n    const handleLogin = Utils.authenticate; // Function for handling login\n\n    const handleLogout = () => { // Function for handling logout\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        setLoggedIn(false);\n        window.location.href = '/';\n    };\n\n    useEffect(() => { // Effect for handling authorization code\n        Utils.handleAuthorizationCode()\n            .then(() => {\n                const accessToken = localStorage.getItem('access_token');\n                if (accessToken) {\n                    console.log('Access Token:', accessToken); // Logging access token\n                    Utils.getProfile(accessToken)\n                        .then(data => {\n                            if (data) {\n                                console.log('User Profile:', data); // Logging user profile\n                                setUserName(data.display_name); // Setting user's name\n                                setUserId(data.id); // Set the user's Spotify user ID\n                            }\n                        })\n                        .catch(error => {\n                            console.error('Error fetching user profile:', error);\n                        });\n                } else {\n                    console.error('Access token not found');\n                }\n            })\n            .catch(error => {\n                console.error('Error handling authorization code:', error);\n            });\n    }, []);\n\n    useEffect(() => { // Effect for setting city and fetching weather data\n        const lastCity = localStorage.getItem('lastCity');\n        if (lastCity) {\n            setCity(lastCity);\n            Utils.fetchWeatherData(lastCity)\n                .then(({ data, error }) => {\n                    if (error) {\n                        setErrorMessage(error);\n                    } else {\n                        setWeatherData(data);\n                        setErrorMessage('');\n                    }\n                });\n        }\n\n        const accessToken = localStorage.getItem('access_token');\n        if (accessToken) {\n            Utils.getProfile(accessToken)\n                .then(data => {\n                    if (data) {\n                        setUserName(data.display_name);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user profile:', error);\n                });\n        } else {\n            console.error('Access token not found');\n        }\n    }, []);\n\n    useEffect(() => { // Effect for handling access token and user profile\n        const accessToken = localStorage.getItem('access_token');\n        const refreshToken = localStorage.getItem('refresh_token');\n\n        if (accessToken) {\n            Utils.getProfile(accessToken, refreshToken)\n                .then(data => {\n                    if (data) {\n                        setUserName(data.display_name);\n                        setLoggedIn(true);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user profile:', error);\n                });\n        } else {\n            console.error('Access token not found');\n        }\n    }, []);\n\n    useEffect(() => { // Effect for setting theme\n        document.body.classList.toggle('light-theme', theme === 'light');\n        localStorage.setItem('theme', theme);\n    }, [theme]);\n\n    const handleSearch = () => { // Function for handling search\n        Utils.fetchWeatherData(city)\n            .then(({ data, error }) => {\n                if (error) {\n                    setErrorMessage(error);\n                } else {\n                    setWeatherData(data);\n                    setErrorMessage('');\n                    localStorage.setItem('lastCity', city);\n                }\n            });\n    };\n\n    const handleChange = (e) => { // Function for handling input change\n        setCity(e.target.value);\n    };\n\n    const handleKeyDown = (e) => { // Function for handling enter key press\n        if (e.key === 'Enter') {\n            handleSearch();\n        }\n    };\n\n    const toggleTheme = () => { // Function for toggling theme\n        setTheme((prevTheme) => (prevTheme === 'main' ? 'light' : 'main'));\n    };\n\n    \n\n    const recommendSongs = async () => {\n        try {\n            const accessToken = localStorage.getItem('access_token');\n            const weatherGenre = mapWeatherToGenres(weatherData); // Get the mapped genre based on weather\n            const response = await Utils.getRecommendations(accessToken, null, weatherGenre, null);\n            setRecommendedTracks(response.tracks);\n        } catch (error) {\n            console.error('Error fetching recommended tracks:', error);\n        }\n    };\n    \n    const mapWeatherToGenres = (weatherData) => {\n        // Map weather conditions to corresponding music genres\n        const weatherCondition = weatherData.weather[0].main.toLowerCase();\n        switch (weatherCondition) {\n            case 'clear':\n                return 'pop'; // Example genre for clear weather\n            case 'rain':\n                return 'chill'; // Example genre for rainy weather\n            case 'clouds':\n                return 'indie'; // Example genre for cloudy weather\n            // Add more cases for other weather conditions as needed\n            default:\n                return 'pop'; // Default genre if weather condition doesn't match any specific genre\n        }\n    };\n\n    useEffect(() => { // Effect for handling search and recommending songs\n        if (weatherData) {\n            recommendSongs();\n        }\n    }, [weatherData]);\n    \n     // Function to create playlist and add recommended songs\n     const savePlaylist = async () => {\n        try {\n            const accessToken = localStorage.getItem('access_token');\n            if (accessToken && userId && weatherData) { // Make sure weatherData is available\n                // Create playlist\n                const playlistResponse = await createPlaylist(accessToken, userId, weatherData);\n                const playlistId = playlistResponse.id;\n    \n                // Add recommended tracks to the playlist\n                await addTracksToPlaylist(accessToken, userId, playlistId, recommendedTracks.map(track => track.uri));\n    \n                console.log('Playlist created and tracks added successfully');\n            } else {\n                console.error('Access token, user ID, or weather data not found');\n            }\n        } catch (error) {\n            console.error('Error saving playlist:', error);\n        }\n    };\n    \n    const createPlaylist = async (accessToken, userId, weatherData) => {\n        const cityName = weatherData.name; // Extract city name from weather data\n        const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n        const formattedDate = `${new Date().getDate().toString().padStart(2, '0')}/${(new Date().getMonth() + 1).toString().padStart(2, '0')}/${new Date().getFullYear()}`;\n        const playlistName = `${cityName}-${weatherCondition}-${formattedDate}`;\n    \n        const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: playlistName,\n                public: true,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to create playlist');\n        }\n        return response.json();\n    };\n    \n\n    const addTracksToPlaylist = async (accessToken, userId, playlistId, trackUris) => {\n        const url = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                uris: trackUris,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to add tracks to playlist');\n        }\n        return response.json();\n    };\n\n    useEffect(() => {\n        // Fetch user's location\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    // Get latitude and longitude\n                    const latitude = position.coords.latitude;\n                    const longitude = position.coords.longitude;\n\n                    // Fetch city based on coordinates\n                    fetchCityFromCoordinates(latitude, longitude);\n                },\n                error => {\n                    console.error('Error getting user location:', error);\n                }\n            );\n        } else {\n            console.error('Geolocation is not supported by this browser.');\n        }\n    }, []);\n\n    const fetchCityFromCoordinates = async (latitude, longitude) => {\n        try {\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${Utils.apiKey}`);\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            const data = await response.json();\n            setCity(data.name); // Set the city based on coordinates\n            setUserLocation({ latitude, longitude }); // Store user's location\n        } catch (error) {\n            console.error('Error fetching city from coordinates:', error);\n        }\n    };\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"card\">\n                    <div className=\"search\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter city name\"\n                            spellCheck=\"false\"\n                            value={city}\n                            onChange={handleChange}\n                            onKeyDown={handleKeyDown} // Enables search by hitting enter\n                        />\n                        <button onClick={handleSearch}>Search</button>\n                    </div>\n\n                    {errorMessage && <div className=\"error\"><p>{errorMessage}</p></div>}\n                    {weatherData && (\n                        <div className=\"weather\">\n                            <h3>Cześć, {userName}!</h3>\n                            <h2>Weather in {weatherData.name}</h2>\n                            <p>Condition: {weatherData.weather[0].main}</p>\n                            <p>Temperature: {Math.round(weatherData.main.temp)}°C</p>\n                            <p>Humidity: {weatherData.main.humidity}%</p>\n                            <p>Wind Speed: {weatherData.wind.speed} km/h</p>\n                        </div>\n                    )}\n                {/* Rekomendacja Piosenek */}\n                <div className=\"container\">\n                    <button onClick={recommendSongs}>Recommend Songs</button>\n                    {recommendedTracks.length > 0 && (\n                     <div>\n                    <h3>Recommended Songs</h3>\n                    <ul>\n                        {recommendedTracks.map((track, index) => (\n                            <li key={index}>{track.name} - {track.artists.map(artist => artist.name).join(', ')}</li>\n                        ))}\n                    </ul>\n                    <button onClick={savePlaylist}>Save Playlist</button>\n                    </div>\n                     )}\n                    </div>\n\n                \n                </div>\n                \n\n                <button className=\"theme-btn\" onClick={toggleTheme}>Theme</button>\n                {loggedIn ? (\n                    <button onClick={handleLogout}>Logout</button>\n                ) : (\n                    <button onClick={handleLogin}>Login with Spotify</button>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}