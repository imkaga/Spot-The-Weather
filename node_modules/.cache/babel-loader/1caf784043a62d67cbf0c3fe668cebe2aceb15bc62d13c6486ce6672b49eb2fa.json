{"ast":null,"code":"import{openWeatherApiKey,openWeatherApiUrl,spotifyClientId,spotifyClientSecret,spotifyRedirectUri}from'./ApiKeys';export const apiKey=openWeatherApiKey;export const clientId=spotifyClientId;export const clientSecret=spotifyClientSecret;export const redirectUri=spotifyRedirectUri;export const apiUrl=openWeatherApiUrl;export async function authenticate(){// Function to handle authentication flow\n// Redirect user to Spotify authorization endpoint\nconst scopes=['user-read-private','user-read-email','user-top-read','playlist-modify-public','playlist-modify-private'];// Add necessary scopes for playlist modification\nwindow.location.href=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&redirect_uri=\").concat(redirectUri,\"&scope=\").concat(scopes.join('%20'),\"&response_type=code\");}export async function handleAuthorizationCode(){// Function to handle authorization code\nconst params=new URLSearchParams(window.location.search);const authorizationCode=params.get('code');if(authorizationCode){try{const response=await fetch('https://accounts.spotify.com/api/token',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded',Authorization:\"Basic \".concat(btoa(\"\".concat(clientId,\":\").concat(clientSecret)))},body:\"grant_type=authorization_code&code=\".concat(authorizationCode,\"&redirect_uri=\").concat(redirectUri)});if(!response.ok){throw new Error(\"Failed to exchange authorization code for access token. Status: \".concat(response.status));}const data=await response.json();const accessToken=data.access_token;if(!accessToken){throw new Error('Access token not found in response');}localStorage.setItem('access_token',accessToken);window.location.href='/';}catch(error){console.error('Error exchanging authorization code:',error);}}}export async function getProfile(accessToken){// Function to fetch user's profile\ntry{const response=await fetch('https://api.spotify.com/v1/me',{headers:{Authorization:'Bearer '+accessToken}});const data=await response.json();return data;}catch(error){console.error('Error fetching user profile:',error);throw error;}}export async function refreshAccessToken(refreshToken){// Function to refresh access token\nconst clientCredentials=btoa(\"\".concat(clientId,\":\").concat(clientSecret));const spotifyTokenResponse=await fetch(\"https://accounts.spotify.com/api/token\",{method:\"POST\",headers:{\"Content-Type\":\"application/x-www-form-urlencoded\",Authorization:\"Basic \".concat(clientCredentials)},body:\"grant_type=refresh_token&refresh_token=\".concat(refreshToken),cache:\"no-cache\"});const spotifyTokenData=await spotifyTokenResponse.json();return spotifyTokenData.access_token;}export async function getTopArtists(accessToken){// Function to fetch user's top artists\nconsole.log('Access Token:',accessToken);// Log the access token\nconst url='https://api.spotify.com/v1/me/top/artists?limit=5';const response=await fetch(url,{headers:{'Authorization':\"Bearer \".concat(accessToken)}});if(!response.ok){console.error('Failed to fetch top artists. Status:',response.status);const errorData=await response.json();console.error('Error data:',errorData);throw new Error('Failed to fetch top artists');}const data=await response.json();console.log('Top Artists Data:',data);// Log the response data\nreturn data;}// Other imports and exports remain the same\nexport async function fetchWeatherData(city){try{const response=await fetch(apiUrl+city+\"&appid=\".concat(apiKey));if(!response.ok){throw new Error(\"HTTP error! Status: \".concat(response.status));}const data=await response.json();localStorage.setItem('lastCity',city);return{data,error:null};}catch(error){console.error(error);return{data:null,error:'Error fetching weather data. Please try again later.'};}}export async function getTopTracks(accessToken){try{const response=await fetch('https://api.spotify.com/v1/me/top/tracks?limit=10',{headers:{'Authorization':\"Bearer \".concat(accessToken)}});if(!response.ok){console.error('Failed to fetch top tracks. Status:',response.status);const errorData=await response.json();console.error('Error data:',errorData);throw new Error('Failed to fetch top tracks');}const data=await response.json();console.log('Top Tracks Data:',data);// Log the response data\nreturn data;}catch(error){console.error('Error fetching top tracks:',error);throw error;}}// Utils.js\nexport const getRecommendations=async(accessToken,seedArtists,seedGenres,seedTracks)=>{let url=\"https://api.spotify.com/v1/recommendations?seed_genres=\".concat(seedGenres);if(seedArtists){url+=\"&seed_artists=\".concat(seedArtists);}if(seedTracks){url+=\"&seed_tracks=\".concat(seedTracks);}const response=await fetch(url,{headers:{Authorization:\"Bearer \".concat(accessToken)}});if(!response.ok){throw new Error('Failed to fetch recommendations');}return response.json();};// In Utils.js\n// Existing imports and exports...\nexport async function createPlaylist(accessToken,userId,weatherData){const cityName=weatherData.name;// Extract city name from weather data\nconst weatherCondition=weatherData.weather[0].main.toLowerCase();// Extract weather condition from weather data\nconst formattedDate=\"\".concat(new Date().getDate(),\"/\").concat(new Date().getMonth()+1,\"/\").concat(new Date().getFullYear());const playlistName=\"\".concat(cityName,\"-\").concat(weatherCondition,\"_\").concat(formattedDate);const url=\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\");const response=await fetch(url,{method:'POST',headers:{'Authorization':\"Bearer \".concat(accessToken),'Content-Type':'application/json'},body:JSON.stringify({name:playlistName,public:true})});if(!response.ok){throw new Error('Failed to create playlist');}return response.json();}export async function addTracksToPlaylist(accessToken,userId,playlistId,trackUris){const url=\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\");const response=await fetch(url,{method:'POST',headers:{'Authorization':\"Bearer \".concat(accessToken),'Content-Type':'application/json'},body:JSON.stringify({uris:trackUris})});if(!response.ok){throw new Error('Failed to add tracks to playlist');}return response.json();}// Existing functions and exports...","map":{"version":3,"names":["openWeatherApiKey","openWeatherApiUrl","spotifyClientId","spotifyClientSecret","spotifyRedirectUri","apiKey","clientId","clientSecret","redirectUri","apiUrl","authenticate","scopes","window","location","href","concat","join","handleAuthorizationCode","params","URLSearchParams","search","authorizationCode","get","response","fetch","method","headers","Authorization","btoa","body","ok","Error","status","data","json","accessToken","access_token","localStorage","setItem","error","console","getProfile","refreshAccessToken","refreshToken","clientCredentials","spotifyTokenResponse","cache","spotifyTokenData","getTopArtists","log","url","errorData","fetchWeatherData","city","getTopTracks","getRecommendations","seedArtists","seedGenres","seedTracks","createPlaylist","userId","weatherData","cityName","name","weatherCondition","weather","main","toLowerCase","formattedDate","Date","getDate","getMonth","getFullYear","playlistName","JSON","stringify","public","addTracksToPlaylist","playlistId","trackUris","uris"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Utils.js"],"sourcesContent":["import { openWeatherApiKey, openWeatherApiUrl, spotifyClientId, spotifyClientSecret, spotifyRedirectUri } from './ApiKeys';\n\nexport const apiKey = openWeatherApiKey;\nexport const clientId = spotifyClientId;\nexport const clientSecret = spotifyClientSecret;\nexport const redirectUri = spotifyRedirectUri;\nexport const apiUrl = openWeatherApiUrl;\n\nexport async function authenticate() {\n    // Function to handle authentication flow\n    // Redirect user to Spotify authorization endpoint\n    const scopes = [\n        'user-read-private', \n        'user-read-email', \n        'user-top-read', \n        'playlist-modify-public', \n        'playlist-modify-private'\n    ]; // Add necessary scopes for playlist modification\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=code`;\n}\n\nexport async function handleAuthorizationCode() {\n    // Function to handle authorization code\n    const params = new URLSearchParams(window.location.search);\n    const authorizationCode = params.get('code');\n\n    if (authorizationCode) {\n        try {\n            const response = await fetch('https://accounts.spotify.com/api/token', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n                },\n                body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${redirectUri}`\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to exchange authorization code for access token. Status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            const accessToken = data.access_token;\n\n            if (!accessToken) {\n                throw new Error('Access token not found in response');\n            }\n\n            localStorage.setItem('access_token', accessToken);\n            window.location.href = '/';\n        } catch (error) {\n            console.error('Error exchanging authorization code:', error);\n        }\n    }\n}\n\nexport async function getProfile(accessToken) {\n    // Function to fetch user's profile\n    try {\n        const response = await fetch('https://api.spotify.com/v1/me', {\n            headers: {\n                Authorization: 'Bearer ' + accessToken\n            }\n        });\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching user profile:', error);\n        throw error;\n    }\n}\n\nexport async function refreshAccessToken(refreshToken) {\n    // Function to refresh access token\n    const clientCredentials = btoa(`${clientId}:${clientSecret}`);\n    const spotifyTokenResponse = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: `Basic ${clientCredentials}`,\n        },\n        body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n        cache: \"no-cache\"\n    });\n\n    const spotifyTokenData = await spotifyTokenResponse.json();\n    return spotifyTokenData.access_token;\n}\n\nexport async function getTopArtists(accessToken) {\n    // Function to fetch user's top artists\n    console.log('Access Token:', accessToken); // Log the access token\n    const url = 'https://api.spotify.com/v1/me/top/artists?limit=5';\n    const response = await fetch(url, {\n        headers: {\n            'Authorization': `Bearer ${accessToken}`\n        }\n    });\n    if (!response.ok) {\n        console.error('Failed to fetch top artists. Status:', response.status);\n        const errorData = await response.json();\n        console.error('Error data:', errorData);\n        throw new Error('Failed to fetch top artists');\n    }\n    const data = await response.json();\n    console.log('Top Artists Data:', data); // Log the response data\n    return data;\n}\n\n// Other imports and exports remain the same\n\nexport async function fetchWeatherData(city) {\n    try {\n        const response = await fetch(apiUrl + city + `&appid=${apiKey}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        localStorage.setItem('lastCity', city);\n        return { data, error: null };\n    } catch (error) {\n        console.error(error);\n        return { data: null, error: 'Error fetching weather data. Please try again later.' };\n    }\n}\n\nexport async function getTopTracks(accessToken) {\n    try {\n        const response = await fetch('https://api.spotify.com/v1/me/top/tracks?limit=10', {\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            }\n        });\n\n        if (!response.ok) {\n            console.error('Failed to fetch top tracks. Status:', response.status);\n            const errorData = await response.json();\n            console.error('Error data:', errorData);\n            throw new Error('Failed to fetch top tracks');\n        }\n\n        const data = await response.json();\n        console.log('Top Tracks Data:', data); // Log the response data\n        return data;\n    } catch (error) {\n        console.error('Error fetching top tracks:', error);\n        throw error;\n    }\n}\n\n// Utils.js\n\nexport const getRecommendations = async (accessToken, seedArtists, seedGenres, seedTracks) => {\n    let url = `https://api.spotify.com/v1/recommendations?seed_genres=${seedGenres}`;\n    if (seedArtists) {\n        url += `&seed_artists=${seedArtists}`;\n    }\n    if (seedTracks) {\n        url += `&seed_tracks=${seedTracks}`;\n    }\n    const response = await fetch(url, {\n        headers: {\n            Authorization: `Bearer ${accessToken}`,\n        },\n    });\n    if (!response.ok) {\n        throw new Error('Failed to fetch recommendations');\n    }\n    return response.json();\n};\n\n// In Utils.js\n\n// Existing imports and exports...\n\nexport async function createPlaylist(accessToken, userId, weatherData) {\n    const cityName = weatherData.name; // Extract city name from weather data\n    const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n    const formattedDate = `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}`;\n    const playlistName = `${cityName}-${weatherCondition}_${formattedDate}`;\n\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            name: playlistName,\n            public: true,\n        }),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to create playlist');\n    }\n    return response.json();\n}\n\n\n\nexport async function addTracksToPlaylist(accessToken, userId, playlistId, trackUris) {\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            uris: trackUris,\n        }),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to add tracks to playlist');\n    }\n    return response.json();\n}\n\n// Existing functions and exports...\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}