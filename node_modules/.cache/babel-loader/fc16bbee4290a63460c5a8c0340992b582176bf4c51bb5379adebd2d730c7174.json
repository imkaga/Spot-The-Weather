{"ast":null,"code":"var _jsxFileName = \"/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom'; // Import useHistory from react-router-dom\nimport * as Utils from './Utils'; // Import functions from Utils.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [city, setCity] = useState(''); // State for storing the city input\n  const [weatherData, setWeatherData] = useState(null); // State for storing weather data\n  const [errorMessage, setErrorMessage] = useState(''); // State for error messages\n  const [userName, setUserName] = useState(''); // State for storing user's name\n  const [loggedIn, setLoggedIn] = useState(false); // State for user login status\n  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'main'); // State for storing theme\n  const [recommendedTracks, setRecommendedTracks] = useState(() => JSON.parse(localStorage.getItem('recommendedTracks')) || []); // State for storing recommended tracks\n  const [userId, setUserId] = useState(''); // State for storing user's Spotify user ID\n  const [refreshCount, setRefreshCount] = useState(0); // State for storing the refresh count\n  const [lastRefreshTime, setLastRefreshTime] = useState(() => parseInt(localStorage.getItem('lastRefreshTime')) || null); // State for storing the last refresh time\n  const [countdown, setCountdown] = useState(null); // State for countdown until next refresh\n  const [showButton, setShowButton] = useState(true); // State for showing or hiding the refresh button\n  const [lastActivityTime, setLastActivityTime] = useState(Date.now()); // State for tracking user activity\n  const [sessionExpired, setSessionExpired] = useState(false); // State for session expiration popup // W RAZIE CZEGO DO WYRZUCENIA\n  const [currentPreview, setCurrentPreview] = useState(null); // State to track current audio preview\n  const [playingTrack, setPlayingTrack] = useState(null); // State to track the currently playing track\n  const history = useHistory(); // Get the history object from react-router\n  const [isPlaying, setIsPlaying] = useState(false);\n  const handleLogin = Utils.authenticate; // Function for handling login\n\n  const handleLogout = () => {\n    Utils.handleLogout(setLoggedIn); // Pass setLoggedIn as an argument\n  };\n  useEffect(() => {\n    // Effect for handling authorization code\n    Utils.handleAuthorizationCode().then(() => {\n      const accessToken = localStorage.getItem('access_token');\n      if (accessToken) {\n        console.log('Access Token:', accessToken); // Logging access token\n        Utils.getProfile(accessToken).then(data => {\n          if (data) {\n            console.log('User Profile:', data); // Logging user profile\n            setUserName(data.display_name); // Setting user's name\n            setUserId(data.id); // Set the user's Spotify user ID\n          }\n        }).catch(error => {\n          console.error('Error fetching user profile:', error);\n        });\n      } else {\n        console.error('Access token not found');\n      }\n    }).catch(error => {\n      console.error('Error handling authorization code:', error);\n    });\n  }, []);\n  useEffect(() => {\n    // Check login status and session expiry on component mount\n    checkLoginStatus();\n    // Add event listener for user activity\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('keypress', handleUserActivity);\n    return () => {\n      // Cleanup event listener on component unmount\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('keypress', handleUserActivity);\n    };\n  }, []);\n  useEffect(() => {\n    // Check login status and session expiry when last activity time changes\n    checkLoginStatus();\n  }, [lastActivityTime]);\n  const checkLoginStatus = () => {\n    const loginTime = localStorage.getItem('login_time');\n    const isLoggedIn = localStorage.getItem('access_token') !== null;\n    if (isLoggedIn && loginTime) {\n      const currentTime = Date.now();\n      const sessionDuration = 60 * 60 * 1000; // Session duration in milliseconds (1 hour)\n\n      if (currentTime - parseInt(loginTime) > sessionDuration) {\n        // Session expired, logout user\n        handleLogout();\n      } else {\n        setLoggedIn(true);\n      }\n    }\n  };\n  const handleUnauthorizedError = error => {\n    if (error.response && error.response.status === 401) {\n      setSessionExpired(true); // Set session expiration state\n      handleLogout(); // Log out the user\n    }\n  };\n  useEffect(() => {\n    if (sessionExpired) {\n      alert('Sesja wygasła. (401)'); // Display popup for session expiration\n    }\n  }, [sessionExpired]);\n  const handleUserActivity = () => {\n    // Update last activity time when user interacts with the page\n    setLastActivityTime(Date.now());\n  };\n  const handleBeforeUnload = () => {\n    // Clear recommended tracks from local storage when the user closes the app\n    localStorage.removeItem('recommendedTracks');\n  };\n  useEffect(() => {\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  useEffect(() => {\n    // Effect for setting city and fetching weather data\n    const lastCity = localStorage.getItem('lastCity');\n    if (lastCity) {\n      setCity(lastCity);\n      Utils.fetchWeatherData(lastCity).then(({\n        data,\n        error\n      }) => {\n        if (error) {\n          setErrorMessage(error);\n        } else {\n          setWeatherData(data);\n          setErrorMessage('');\n        }\n      });\n    }\n    const accessToken = localStorage.getItem('access_token');\n    if (accessToken) {\n      Utils.getProfile(accessToken).then(data => {\n        if (data) {\n          setUserName(data.display_name);\n        }\n      }).catch(error => {\n        console.error('Error fetching user profile:', error);\n      });\n    } else {\n      console.error('Access token not found');\n    }\n  }, []);\n  useEffect(() => {\n    // Effect for handling access token and user profile\n    const accessToken = localStorage.getItem('access_token');\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (accessToken) {\n      Utils.getProfile(accessToken, refreshToken).then(data => {\n        if (data) {\n          setUserName(data.display_name);\n          setLoggedIn(true);\n        }\n      }).catch(error => {\n        console.error('Error fetching user profile:', error);\n        if (error.response && error.response.status === 401) {\n          handleLogout(); // Log out user if 401 error occurs\n        }\n      });\n    } else {\n      console.error('Access token not found');\n    }\n  }, []);\n  useEffect(() => {\n    // Effect for setting theme\n    document.body.classList.toggle('light-theme', theme === 'light');\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  useEffect(() => {\n    // Effect for handling countdown until next refresh\n    const storedLastRefreshTime = localStorage.getItem('lastRefreshTime');\n    if (storedLastRefreshTime) {\n      const remainingTime = 5 * 60 * 1000 - (Date.now() - parseInt(storedLastRefreshTime));\n      if (remainingTime > 0) {\n        setCountdown(remainingTime);\n        setShowButton(false); // Hide the button when countdown starts\n      }\n    }\n  }, []);\n  useEffect(() => {\n    const storedRecommendedTracks = localStorage.getItem('recommendedTracks');\n    if (storedRecommendedTracks) {\n      setRecommendedTracks(JSON.parse(storedRecommendedTracks));\n    }\n  }, []);\n  useEffect(() => {\n    return () => {\n      if (currentPreview) {\n        Utils.pausePreview(currentPreview); // Pause the audio preview\n        setCurrentPreview(null); // Reset current audio preview\n        setPlayingTrack(null); // Reset playing track\n        setIsPlaying(false); // Reset playing state\n      }\n    };\n  }, []);\n  useEffect(() => {\n    // Effect for updating countdown timer\n    if (countdown !== null) {\n      const timer = setInterval(() => {\n        setCountdown(prevCountdown => {\n          if (prevCountdown <= 0) {\n            clearInterval(timer);\n            setShowButton(true); // Show the button when countdown ends\n            return 0;\n          } else {\n            return prevCountdown - 1000;\n          }\n        });\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [countdown]);\n  const handleSearch = () => {\n    // Function for handling search\n    Utils.fetchWeatherData(city).then(({\n      data,\n      error\n    }) => {\n      if (error) {\n        setErrorMessage(error);\n        // Alert the user for an invalid city name\n        alert('Niepoprawna nawzwa miejscowości');\n      } else {\n        setWeatherData(data);\n        setErrorMessage('');\n        localStorage.setItem('lastCity', city);\n        setRefreshCount(0); // Reset refresh count when city is changed\n        setShowButton(true); // Show the button after search\n      }\n    });\n  };\n  const handleChange = e => {\n    // Function for handling input change\n    setCity(e.target.value);\n  };\n  const handleKeyDown = e => {\n    // Function for handling enter key press\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n  const toggleTheme = () => {\n    // Function for toggling theme\n    setTheme(prevTheme => prevTheme === 'main' ? 'light' : 'main');\n  };\n  const recommendSongs = async () => {\n    try {\n      console.log('Refreshing recommendations...'); // Console log to indicate refreshing recommendations\n      const accessToken = localStorage.getItem('access_token');\n      const weatherGenre = mapWeatherToGenres(weatherData); // Get the mapped genre based on weather\n      const response = await Utils.getRecommendations(accessToken, null, weatherGenre, null);\n      localStorage.setItem('recommendedTracks', JSON.stringify(response.tracks)); // Store recommended tracks in localStorage\n      setRecommendedTracks(response.tracks);\n      localStorage.setItem('lastRefreshTime', Date.now());\n      setLastRefreshTime(Date.now());\n      setRefreshCount(prevCount => {\n        if (prevCount + 1 === 5) {\n          setCountdown(5 * 60 * 1000);\n          setShowButton(false); // Hide the button after 5 clicks\n        }\n        return prevCount + 1;\n      });\n    } catch (error) {\n      console.error('Error fetching recommended tracks:', error);\n    }\n  };\n  const mapWeatherToGenres = weatherData => {\n    const weatherCondition = weatherData.weather[0].main.toLowerCase();\n    switch (weatherCondition) {\n      case 'clear':\n        return ['pop', 'hip-hop'];\n      // Example genres for clear weather\n      case 'rain':\n        return ['chill', 'jazz', 'classical'];\n      // Example genres for rainy weather\n      case 'clouds':\n        return ['rock'];\n      // Example genre for cloudy weather\n      case 'thunder':\n        return ['rock', 'metal'];\n      // Example genres for thunderstorm\n      // Add more cases for other weather conditions as needed\n      default:\n        return ['pop'];\n      // Default genre if weather condition doesn't match any specific genre\n    }\n  };\n  const savePlaylist = async () => {\n    // Function for saving playlist\n    try {\n      const accessToken = localStorage.getItem('access_token');\n      if (accessToken && userId && weatherData) {\n        // Make sure weatherData is available\n        // Create playlist\n        const playlistResponse = await createPlaylist(accessToken, userId, weatherData);\n        const playlistId = playlistResponse.id;\n\n        // Add recommended tracks to the playlist\n        await addTracksToPlaylist(accessToken, userId, playlistId, recommendedTracks.map(track => track.uri));\n        console.log('Playlist created and tracks added successfully');\n      } else {\n        console.error('Access token, user ID, or weather data not found');\n      }\n    } catch (error) {\n      console.error('Error saving playlist:', error);\n    }\n  };\n  const createPlaylist = async (accessToken, userId, weatherData) => {\n    // Function for creating playlist\n    const cityName = weatherData.name; // Extract city name from weather data\n    const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n    const formattedDate = `${new Date().getDate().toString().padStart(2, '0')}/${(new Date().getMonth() + 1).toString().padStart(2, '0')}/${new Date().getFullYear()}`;\n    const playlistName = `${cityName}-${weatherCondition}-${formattedDate}`;\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: playlistName,\n        public: true\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create playlist');\n    }\n    return response.json();\n  };\n  const handlePreviewPlay = (previewUrl, track) => {\n    if (currentPreview) {\n      Utils.pausePreview(currentPreview);\n    }\n    const audio = Utils.playPreview(previewUrl, setCurrentPreview);\n    setPlayingTrack(track);\n    setIsPlaying(true); // Set playing state to true when starting playback\n  };\n  const handlePause = () => {\n    if (currentPreview) {\n      Utils.pausePreview(currentPreview);\n      setIsPlaying(false); // Update playing state to false when pausing\n    }\n  };\n  const addTracksToPlaylist = async (accessToken, userId, playlistId, trackUris) => {\n    // Function for adding tracks to playlist\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        uris: trackUris\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add tracks to playlist');\n    }\n    return response.json();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter city name\",\n            spellCheck: \"false\",\n            value: city,\n            onChange: handleChange,\n            onKeyDown: handleKeyDown // Enables search by hitting enter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSearch,\n            children: \"Szukaj\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 38\n        }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather\",\n          children: [!loggedIn &&\n          /*#__PURE__*/\n          // Render only if not logged in\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Cze\\u015B\\u0107!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Je\\u015Bli chcesz skorzysta\\u0107 z wszystkich dost\\u0119pnych opcji aplikacji, zaloguj si\\u0119.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true), loggedIn &&\n          /*#__PURE__*/\n          // Render only if logged in\n          _jsxDEV(\"h3\", {\n            children: [\"Cze\\u015B\\u0107, \", userName, \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Pogoda dla miasta \", weatherData.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Warunki Pogodowe: \", weatherData.weather[0].main]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperatura: \", Math.round(weatherData.main.temp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Wilgotno\\u015B\\u0107: \", weatherData.main.humidity, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [loggedIn && !showButton && countdown !== null &&\n          /*#__PURE__*/\n          // Check loggedIn and showButton states\n          _jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Wszystkie od\\u015Bwie\\u017Cenia zosta\\u0142y wykorzystane.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Prosz\\u0119 poczeka\\u0107: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 36\n              }, this), \" \", Math.floor(countdown / 60000), \":\", (countdown % 60000 / 1000).toFixed(0).padStart(2, '0')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 29\n          }, this), loggedIn && showButton &&\n          /*#__PURE__*/\n          // Check both loggedIn and showButton states\n          _jsxDEV(\"button\", {\n            className: \"recommend-songs\",\n            onClick: recommendedTracks.length > 0 ? recommendSongs : recommendSongs,\n            children: recommendedTracks.length > 0 ? \"Refresh Recommendations\" : \"Recommend Songs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 29\n          }, this), recommendedTracks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Rekomendowane piosenki:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: savePlaylist,\n              children: \"Zapisz Playlist\\u0119\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"recommended-main\",\n              children: /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: recommendedTracks.map((track, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: track.album.images[0].url,\n                      alt: \"Album Cover\",\n                      style: {\n                        width: '50px',\n                        height: '50px'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 448,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      style: {\n                        fontWeight: 'bold'\n                      },\n                      children: track.artists.map(artist => artist.name).join(', ')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 452,\n                      columnNumber: 49\n                    }, this), \" - \", track.name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 454,\n                      columnNumber: 49\n                    }, this), track.preview_url ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: playingTrack === track && isPlaying ? /*#__PURE__*/_jsxDEV(\"button\", {\n                        onClick: handlePause,\n                        children: \"Pause\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 458,\n                        columnNumber: 7\n                      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                        onClick: () => handlePreviewPlay(track.preview_url, track),\n                        children: \"Play\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 460,\n                        columnNumber: 7\n                      }, this)\n                    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"song-preview\",\n                      children: \"Preview not available\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 464,\n                      columnNumber: 3\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 450,\n                    columnNumber: 45\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }, this), loggedIn ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login\",\n        onClick: handleLogin,\n        children: \"Zaloguj si\\u0119 ze Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"befccswgVkYXOUiNB/pV40JATaU=\", false, function () {\n  return [useHistory];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useHistory","Utils","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","city","setCity","weatherData","setWeatherData","errorMessage","setErrorMessage","userName","setUserName","loggedIn","setLoggedIn","theme","setTheme","localStorage","getItem","recommendedTracks","setRecommendedTracks","JSON","parse","userId","setUserId","refreshCount","setRefreshCount","lastRefreshTime","setLastRefreshTime","parseInt","countdown","setCountdown","showButton","setShowButton","lastActivityTime","setLastActivityTime","Date","now","sessionExpired","setSessionExpired","currentPreview","setCurrentPreview","playingTrack","setPlayingTrack","history","isPlaying","setIsPlaying","handleLogin","authenticate","handleLogout","handleAuthorizationCode","then","accessToken","console","log","getProfile","data","display_name","id","catch","error","checkLoginStatus","window","addEventListener","handleUserActivity","removeEventListener","loginTime","isLoggedIn","currentTime","sessionDuration","handleUnauthorizedError","response","status","alert","handleBeforeUnload","removeItem","lastCity","fetchWeatherData","refreshToken","document","body","classList","toggle","setItem","storedLastRefreshTime","remainingTime","storedRecommendedTracks","pausePreview","timer","setInterval","prevCountdown","clearInterval","handleSearch","handleChange","e","target","value","handleKeyDown","key","toggleTheme","prevTheme","recommendSongs","weatherGenre","mapWeatherToGenres","getRecommendations","stringify","tracks","prevCount","weatherCondition","weather","main","toLowerCase","savePlaylist","playlistResponse","createPlaylist","playlistId","addTracksToPlaylist","map","track","uri","cityName","name","formattedDate","getDate","toString","padStart","getMonth","getFullYear","playlistName","url","fetch","method","headers","public","ok","Error","json","handlePreviewPlay","previewUrl","audio","playPreview","handlePause","trackUris","uris","children","className","type","placeholder","spellCheck","onChange","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Math","round","temp","humidity","floor","toFixed","length","index","src","album","images","alt","style","width","height","fontWeight","artists","artist","join","preview_url","_c","$RefreshReg$"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom'; // Import useHistory from react-router-dom\nimport * as Utils from './Utils'; // Import functions from Utils.js\n\nfunction Home() {\n    const [city, setCity] = useState(''); // State for storing the city input\n    const [weatherData, setWeatherData] = useState(null); // State for storing weather data\n    const [errorMessage, setErrorMessage] = useState(''); // State for error messages\n    const [userName, setUserName] = useState(''); // State for storing user's name\n    const [loggedIn, setLoggedIn] = useState(false); // State for user login status\n    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'main'); // State for storing theme\n    const [recommendedTracks, setRecommendedTracks] = useState(() => JSON.parse(localStorage.getItem('recommendedTracks')) || []); // State for storing recommended tracks\n    const [userId, setUserId] = useState(''); // State for storing user's Spotify user ID\n    const [refreshCount, setRefreshCount] = useState(0); // State for storing the refresh count\n    const [lastRefreshTime, setLastRefreshTime] = useState(() => parseInt(localStorage.getItem('lastRefreshTime')) || null); // State for storing the last refresh time\n    const [countdown, setCountdown] = useState(null); // State for countdown until next refresh\n    const [showButton, setShowButton] = useState(true); // State for showing or hiding the refresh button\n    const [lastActivityTime, setLastActivityTime] = useState(Date.now()); // State for tracking user activity\n    const [sessionExpired, setSessionExpired] = useState(false); // State for session expiration popup // W RAZIE CZEGO DO WYRZUCENIA\n    const [currentPreview, setCurrentPreview] = useState(null); // State to track current audio preview\n    const [playingTrack, setPlayingTrack] = useState(null); // State to track the currently playing track\n    const history = useHistory(); // Get the history object from react-router\n    const [isPlaying, setIsPlaying] = useState(false);\n    \n    \n\n    const handleLogin = Utils.authenticate; // Function for handling login\n\n    const handleLogout = () => {\n        Utils.handleLogout(setLoggedIn); // Pass setLoggedIn as an argument\n    };\n\n    useEffect(() => { // Effect for handling authorization code\n        Utils.handleAuthorizationCode()\n            .then(() => {\n                const accessToken = localStorage.getItem('access_token');\n                if (accessToken) {\n                    console.log('Access Token:', accessToken); // Logging access token\n                    Utils.getProfile(accessToken)\n                        .then(data => {\n                            if (data) {\n                                console.log('User Profile:', data); // Logging user profile\n                                setUserName(data.display_name); // Setting user's name\n                                setUserId(data.id); // Set the user's Spotify user ID\n                            }\n                        })\n                        .catch(error => {\n                            console.error('Error fetching user profile:', error);\n                        });\n                } else {\n                    console.error('Access token not found');\n                }\n            })\n            .catch(error => {\n                console.error('Error handling authorization code:', error);\n            });\n    }, []);\n\n    useEffect(() => {\n        // Check login status and session expiry on component mount\n        checkLoginStatus();\n        // Add event listener for user activity\n        window.addEventListener('mousemove', handleUserActivity);\n        window.addEventListener('keypress', handleUserActivity);\n\n        return () => {\n            // Cleanup event listener on component unmount\n            window.removeEventListener('mousemove', handleUserActivity);\n            window.removeEventListener('keypress', handleUserActivity);\n        };\n    }, []);\n\n    useEffect(() => {\n        // Check login status and session expiry when last activity time changes\n        checkLoginStatus();\n    }, [lastActivityTime]);\n\n    const checkLoginStatus = () => {\n        const loginTime = localStorage.getItem('login_time');\n        const isLoggedIn = localStorage.getItem('access_token') !== null;\n\n        if (isLoggedIn && loginTime) {\n            const currentTime = Date.now();\n            const sessionDuration = 60 * 60 * 1000; // Session duration in milliseconds (1 hour)\n\n            if (currentTime - parseInt(loginTime) > sessionDuration) {\n                // Session expired, logout user\n                handleLogout();\n            } else {\n                setLoggedIn(true);\n            }\n        }\n    };\n\n    const handleUnauthorizedError = (error) => {\n        if (error.response && error.response.status === 401) {\n            setSessionExpired(true); // Set session expiration state\n            handleLogout(); // Log out the user\n        }\n    };\n\n    useEffect(() => {\n        if (sessionExpired) {\n            alert('Sesja wygasła. (401)'); // Display popup for session expiration\n        }\n    }, [sessionExpired]);\n\n    \n\n    const handleUserActivity = () => {\n        // Update last activity time when user interacts with the page\n        setLastActivityTime(Date.now());\n    };\n\n    const handleBeforeUnload = () => {\n        // Clear recommended tracks from local storage when the user closes the app\n        localStorage.removeItem('recommendedTracks');\n    };\n\n    useEffect(() => {\n        window.addEventListener('beforeunload', handleBeforeUnload);\n        return () => {\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        };\n    }, []);\n    \n\n    useEffect(() => { // Effect for setting city and fetching weather data\n        const lastCity = localStorage.getItem('lastCity');\n        if (lastCity) {\n            setCity(lastCity);\n            Utils.fetchWeatherData(lastCity)\n                .then(({ data, error }) => {\n                    if (error) {\n                        setErrorMessage(error);\n                    } else {\n                        setWeatherData(data);\n                        setErrorMessage('');\n                    }\n                });\n        }\n\n        const accessToken = localStorage.getItem('access_token');\n        if (accessToken) {\n            Utils.getProfile(accessToken)\n                .then(data => {\n                    if (data) {\n                        setUserName(data.display_name);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user profile:', error);\n                });\n        } else {\n            console.error('Access token not found');\n        }\n    }, []);\n\n    useEffect(() => { // Effect for handling access token and user profile\n        const accessToken = localStorage.getItem('access_token');\n        const refreshToken = localStorage.getItem('refresh_token');\n    \n        if (accessToken) {\n            Utils.getProfile(accessToken, refreshToken)\n                .then(data => {\n                    if (data) {\n                        setUserName(data.display_name);\n                        setLoggedIn(true);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user profile:', error);\n                    if (error.response && error.response.status === 401) {\n                        handleLogout(); // Log out user if 401 error occurs\n                    }\n                });\n        } else {\n            console.error('Access token not found');\n        }\n    }, []);\n    \n\n    useEffect(() => { // Effect for setting theme\n        document.body.classList.toggle('light-theme', theme === 'light');\n        localStorage.setItem('theme', theme);\n    }, [theme]);\n\n    useEffect(() => { // Effect for handling countdown until next refresh\n        const storedLastRefreshTime = localStorage.getItem('lastRefreshTime');\n        if (storedLastRefreshTime) {\n            const remainingTime = 5 * 60 * 1000 - (Date.now() - parseInt(storedLastRefreshTime));\n            if (remainingTime > 0) {\n                setCountdown(remainingTime);\n                setShowButton(false); // Hide the button when countdown starts\n            }\n        }\n    }, []);\n\n    useEffect(() => { \n        const storedRecommendedTracks = localStorage.getItem('recommendedTracks');\n        if (storedRecommendedTracks) {\n            setRecommendedTracks(JSON.parse(storedRecommendedTracks));\n        }\n    }, []);\n    \n    useEffect(() => {\n        return () => {\n          if (currentPreview) {\n            Utils.pausePreview(currentPreview); // Pause the audio preview\n            setCurrentPreview(null); // Reset current audio preview\n            setPlayingTrack(null); // Reset playing track\n            setIsPlaying(false); // Reset playing state\n          }\n        };\n      }, []);\n      \n      \n      \n    useEffect(() => { // Effect for updating countdown timer\n        if (countdown !== null) {\n            const timer = setInterval(() => {\n                setCountdown(prevCountdown => {\n                    if (prevCountdown <= 0) {\n                        clearInterval(timer);\n                        setShowButton(true); // Show the button when countdown ends\n                        return 0;\n                    } else {\n                        return prevCountdown - 1000;\n                    }\n                });\n            }, 1000);\n            return () => clearInterval(timer);\n        }\n    }, [countdown]);\n\n    const handleSearch = () => { // Function for handling search\n        Utils.fetchWeatherData(city)\n            .then(({ data, error }) => {\n                if (error) {\n                    setErrorMessage(error);\n                    // Alert the user for an invalid city name\n                    alert('Niepoprawna nawzwa miejscowości');\n                } else {\n                    setWeatherData(data);\n                    setErrorMessage('');\n                    localStorage.setItem('lastCity', city);\n                    setRefreshCount(0); // Reset refresh count when city is changed\n                    setShowButton(true); // Show the button after search\n                }\n            });\n    };\n    \n\n    const handleChange = (e) => { // Function for handling input change\n        setCity(e.target.value);\n    };\n\n    const handleKeyDown = (e) => { // Function for handling enter key press\n        if (e.key === 'Enter') {\n            handleSearch();\n        }\n    };\n\n    const toggleTheme = () => { // Function for toggling theme\n        setTheme((prevTheme) => (prevTheme === 'main' ? 'light' : 'main'));\n    };\n\n    const recommendSongs = async () => {\n        try {\n            console.log('Refreshing recommendations...'); // Console log to indicate refreshing recommendations\n            const accessToken = localStorage.getItem('access_token');\n            const weatherGenre = mapWeatherToGenres(weatherData); // Get the mapped genre based on weather\n            const response = await Utils.getRecommendations(accessToken, null, weatherGenre, null);\n            localStorage.setItem('recommendedTracks', JSON.stringify(response.tracks)); // Store recommended tracks in localStorage\n            setRecommendedTracks(response.tracks);\n            localStorage.setItem('lastRefreshTime', Date.now());\n            setLastRefreshTime(Date.now());\n            setRefreshCount(prevCount => {\n                if (prevCount + 1 === 5) {\n                    setCountdown(5 * 60 * 1000);\n                    setShowButton(false); // Hide the button after 5 clicks\n                }\n                return prevCount + 1;\n            });\n        } catch (error) {\n            console.error('Error fetching recommended tracks:', error);\n        }\n    };\n    \n    const mapWeatherToGenres = (weatherData) => {\n        const weatherCondition = weatherData.weather[0].main.toLowerCase();\n    \n        switch (weatherCondition) {\n            case 'clear':\n                return ['pop', 'hip-hop']; // Example genres for clear weather\n            case 'rain':\n                return ['chill', 'jazz', 'classical']; // Example genres for rainy weather\n            case 'clouds':\n                return ['rock']; // Example genre for cloudy weather\n            case 'thunder':\n                return ['rock', 'metal']; // Example genres for thunderstorm\n            // Add more cases for other weather conditions as needed\n            default:\n                return ['pop']; // Default genre if weather condition doesn't match any specific genre\n        }\n    };\n    \n\n    const savePlaylist = async () => { // Function for saving playlist\n        try {\n            const accessToken = localStorage.getItem('access_token');\n            if (accessToken && userId && weatherData) { // Make sure weatherData is available\n                // Create playlist\n                const playlistResponse = await createPlaylist(accessToken, userId, weatherData);\n                const playlistId = playlistResponse.id;\n\n                // Add recommended tracks to the playlist\n                await addTracksToPlaylist(accessToken, userId, playlistId, recommendedTracks.map(track => track.uri));\n\n                console.log('Playlist created and tracks added successfully');\n            } else {\n                console.error('Access token, user ID, or weather data not found');\n            }\n        } catch (error) {\n            console.error('Error saving playlist:', error);\n        }\n    };\n\n    const createPlaylist = async (accessToken, userId, weatherData) => { // Function for creating playlist\n        const cityName = weatherData.name; // Extract city name from weather data\n        const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n        const formattedDate = `${new Date().getDate().toString().padStart(2, '0')}/${(new Date().getMonth() + 1).toString().padStart(2, '0')}/${new Date().getFullYear()}`;\n        const playlistName = `${cityName}-${weatherCondition}-${formattedDate}`;\n\n        const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: playlistName,\n                public: true,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to create playlist');\n        }\n        return response.json();\n    };\n\n    const handlePreviewPlay = (previewUrl, track) => {\n        if (currentPreview) {\n          Utils.pausePreview(currentPreview);\n        }\n      \n        const audio = Utils.playPreview(previewUrl, setCurrentPreview);\n        setPlayingTrack(track);\n        setIsPlaying(true); // Set playing state to true when starting playback\n      };\n      \n      \n      const handlePause = () => {\n        if (currentPreview) {\n          Utils.pausePreview(currentPreview);\n          setIsPlaying(false); // Update playing state to false when pausing\n        }\n      };\n      \n\n    const addTracksToPlaylist = async (accessToken, userId, playlistId, trackUris) => { // Function for adding tracks to playlist\n        const url = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                uris: trackUris,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to add tracks to playlist');\n        }\n        return response.json();\n    };\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"card\">\n                    <div className=\"search\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter city name\"\n                            spellCheck=\"false\"\n                            value={city}\n                            onChange={handleChange}\n                            onKeyDown={handleKeyDown} // Enables search by hitting enter\n                        />\n                        <button onClick={handleSearch}>Szukaj</button>\n                    </div>\n\n                    {errorMessage && <div className=\"error\"><p>{errorMessage}</p></div>}\n                    {weatherData && (\n                        <div className=\"weather\">\n                            {!loggedIn && ( // Render only if not logged in\n                                <>\n                                    <h3>Cześć!</h3>\n                                    <h4>Jeśli chcesz skorzystać z wszystkich dostępnych opcji aplikacji, zaloguj się.</h4>\n                                </>\n                            )}\n                            {loggedIn && ( // Render only if logged in\n                                <h3>Cześć, {userName}!</h3>\n                            )}\n                            <h2>Pogoda dla miasta {weatherData.name}</h2>\n                            <p>Warunki Pogodowe: {weatherData.weather[0].main}</p>\n                            <p>Temperatura: {Math.round(weatherData.main.temp)}°C</p>\n                            <p>Wilgotność: {weatherData.main.humidity}%</p>\n                        </div>\n                    )}\n                    <div className=\"container\">\n                    {loggedIn && !showButton && countdown !== null && ( // Check loggedIn and showButton states\n                            <div>\n                                <p>Wszystkie odświeżenia zostały wykorzystane.</p>\n                                {/* <p>You used up all of your refreshes. Please wait:</p> */}\n\n                                <p><b>Proszę poczekać: </b> {Math.floor(countdown / 60000)}:{(countdown % 60000 / 1000).toFixed(0).padStart(2, '0')}</p>\n                            </div>\n                        )}\n                        {loggedIn && showButton && ( // Check both loggedIn and showButton states\n                            <button className='recommend-songs' onClick={recommendedTracks.length > 0 ? recommendSongs : recommendSongs}>\n                                {recommendedTracks.length > 0 ? \"Refresh Recommendations\" : \"Recommend Songs\"}\n                            </button>\n                        )}\n                        {recommendedTracks.length > 0 && (\n                            <div>\n                                <h3>Rekomendowane piosenki:</h3>\n                                <button onClick={savePlaylist}>Zapisz Playlistę</button>\n                                <div className=\"recommended-main\">\n                                <ul>\n                                    {recommendedTracks.map((track, index) => (\n                                        <li key={index}>\n                                            <div>\n                                                {/* Render album image */}\n                                                <img src={track.album.images[0].url} alt=\"Album Cover\" style={{ width: '50px', height: '50px' }} />\n                                            </div>\n                                            <div>\n                                                {/* Render track name and artists */}\n                                                <span style={{ fontWeight: 'bold' }}>{track.artists.map(artist => artist.name).join(', ')}</span> - {track.name}\n                                                {/* Check if track has preview URL and render audio player */}\n                                                <br></br>\n                                                {track.preview_url ? (\n  <>\n    {playingTrack === track && isPlaying ? (\n      <button onClick={handlePause}>Pause</button>\n    ) : (\n      <button onClick={() => handlePreviewPlay(track.preview_url, track)}>Play</button>\n    )}\n  </>\n) : (\n  <p className=\"song-preview\">Preview not available</p>\n)}\n\n                                            </div>\n                                        </li>\n                                    ))}\n                                </ul>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {/* <button onClick={() => Utils.saveAsImage('weather')}>Save Image</button> */}\n\n                {loggedIn ? (\n                    <button onClick={handleLogout}>Logout</button>\n                ) : (\n                    <button className=\"login\" onClick={handleLogin}>Zaloguj się ze Spotify</button>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}