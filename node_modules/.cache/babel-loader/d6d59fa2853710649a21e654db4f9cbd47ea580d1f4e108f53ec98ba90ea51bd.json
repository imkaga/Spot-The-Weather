{"ast":null,"code":"export const getRecommendedArtists = async (accessToken, genre, popularity, limit = 5) => {\n  const popularityRanges = {\n    'very-popular': {\n      min: 90,\n      max: 100\n    },\n    'popular': {\n      min: 70,\n      max: 89\n    },\n    'moderate': {\n      min: 40,\n      max: 69\n    },\n    'niche': {\n      min: 10,\n      max: 39\n    },\n    'underground': {\n      min: 0,\n      max: 9\n    }\n  };\n  let url = `https://api.spotify.com/v1/recommendations?limit=${limit}&seed_genres=${encodeURIComponent(genre)}`;\n  if (popularity) {\n    const range = popularityRanges[popularity];\n    if (range) {\n      url += `&min_popularity=${range.min}&max_popularity=${range.max}`;\n    }\n  }\n  const response = await fetch(url, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch recommendations');\n  }\n  const data = await response.json();\n  return data.artists; // Return only the artists from the response\n};","map":{"version":3,"names":["getRecommendedArtists","accessToken","genre","popularity","limit","popularityRanges","min","max","url","encodeURIComponent","range","response","fetch","headers","Authorization","ok","Error","data","json","artists"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/FindArtist.js"],"sourcesContent":["export const getRecommendedArtists = async (accessToken, genre, popularity, limit = 5) => {\n    const popularityRanges = {\n        'very-popular': { min: 90, max: 100 },\n        'popular': { min: 70, max: 89 },\n        'moderate': { min: 40, max: 69 },\n        'niche': { min: 10, max: 39 },\n        'underground': { min: 0, max: 9 }\n    };\n\n    let url = `https://api.spotify.com/v1/recommendations?limit=${limit}&seed_genres=${encodeURIComponent(genre)}`;\n    \n    if (popularity) {\n        const range = popularityRanges[popularity];\n        if (range) {\n            url += `&min_popularity=${range.min}&max_popularity=${range.max}`;\n        }\n    }\n\n    const response = await fetch(url, {\n        headers: {\n            Authorization: `Bearer ${accessToken}`,\n        },\n    });\n\n    if (!response.ok) {\n        throw new Error('Failed to fetch recommendations');\n    }\n\n    const data = await response.json();\n    return data.artists; // Return only the artists from the response\n};\n"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAG,MAAAA,CAAOC,WAAW,EAAEC,KAAK,EAAEC,UAAU,EAAEC,KAAK,GAAG,CAAC,KAAK;EACtF,MAAMC,gBAAgB,GAAG;IACrB,cAAc,EAAE;MAAEC,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAI,CAAC;IACrC,SAAS,EAAE;MAAED,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAC/B,UAAU,EAAE;MAAED,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAChC,OAAO,EAAE;MAAED,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAC7B,aAAa,EAAE;MAAED,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAE;EACpC,CAAC;EAED,IAAIC,GAAG,GAAI,oDAAmDJ,KAAM,gBAAeK,kBAAkB,CAACP,KAAK,CAAE,EAAC;EAE9G,IAAIC,UAAU,EAAE;IACZ,MAAMO,KAAK,GAAGL,gBAAgB,CAACF,UAAU,CAAC;IAC1C,IAAIO,KAAK,EAAE;MACPF,GAAG,IAAK,mBAAkBE,KAAK,CAACJ,GAAI,mBAAkBI,KAAK,CAACH,GAAI,EAAC;IACrE;EACJ;EAEA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;IAC9BK,OAAO,EAAE;MACLC,aAAa,EAAG,UAASb,WAAY;IACzC;EACJ,CAAC,CAAC;EAEF,IAAI,CAACU,QAAQ,CAACI,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EACtD;EAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}