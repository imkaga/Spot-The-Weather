{"ast":null,"code":"import { openWeatherApiKey, openWeatherApiUrl, spotifyClientId, spotifyClientSecret, spotifyRedirectUri } from './ApiKeys';\nimport html2canvas from 'html2canvas';\nexport const apiKey = openWeatherApiKey;\nexport const clientId = spotifyClientId;\nexport const clientSecret = spotifyClientSecret;\nexport const redirectUri = spotifyRedirectUri;\nexport const apiUrl = openWeatherApiUrl;\nexport async function authenticate() {\n  // Function to handle authentication flow\n  // Redirect user to Spotify authorization endpoint\n  const scopes = ['user-read-private', 'user-read-email', 'user-top-read', 'playlist-modify-public', 'playlist-modify-private']; // Add necessary scopes for playlist modification\n  window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=code`;\n}\nexport async function handleAuthorizationCode() {\n  const params = new URLSearchParams(window.location.search);\n  const authorizationCode = params.get('code');\n  if (authorizationCode) {\n    try {\n      const response = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n        },\n        body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${redirectUri}`\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to exchange authorization code for access token. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      const accessToken = data.access_token;\n      if (!accessToken) {\n        throw new Error('Access token not found in response');\n      }\n      localStorage.setItem('access_token', accessToken);\n      localStorage.setItem('login_time', Date.now()); // Update login time\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Error exchanging authorization code:', error);\n    }\n  } else {\n    const accessToken = localStorage.getItem('access_token');\n    const refreshToken = localStorage.getItem('refresh_token');\n    const loginTime = localStorage.getItem('login_time');\n    if (accessToken && refreshToken && loginTime) {\n      const currentTime = Date.now();\n      const sessionDuration = 60 * 60 * 1000; // Session duration in milliseconds (1 hour)\n\n      if (currentTime - parseInt(loginTime) > sessionDuration) {\n        // Session expired, refresh access token\n        try {\n          const newAccessToken = await refreshAccessToken(refreshToken);\n          localStorage.setItem('access_token', newAccessToken);\n          localStorage.setItem('login_time', Date.now()); // Update login time\n          console.log('Access Token Refreshed:', newAccessToken);\n        } catch (refreshError) {\n          console.error('Error refreshing access token:', refreshError);\n          handleLogout(); // Log out user if refresh token fails\n        }\n      }\n    }\n  }\n}\n\n// Utils.js\n\nexport async function handleLogout(logoutCallback) {\n  localStorage.removeItem('access_token');\n  localStorage.removeItem('refresh_token');\n  localStorage.removeItem('login_time'); // Remove login time on logout\n  logoutCallback(false); // Call the callback function to update login state\n  window.location.href = '/';\n}\nexport async function getProfile(accessToken) {\n  // Function to fetch user's profile\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me', {\n      headers: {\n        Authorization: 'Bearer ' + accessToken\n      }\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    throw error;\n  }\n}\nexport async function refreshAccessToken(refreshToken) {\n  // Function to refresh access token\n  const clientCredentials = btoa(`${clientId}:${clientSecret}`);\n  const spotifyTokenResponse = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${clientCredentials}`\n    },\n    body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n    cache: \"no-cache\"\n  });\n  const spotifyTokenData = await spotifyTokenResponse.json();\n  return spotifyTokenData.access_token;\n}\nexport async function getTopArtists(accessToken) {\n  // Function to fetch user's top artists\n  console.log('Access Token:', accessToken); // Log the access token\n  const url = 'https://api.spotify.com/v1/me/top/artists?limit=5';\n  const response = await fetch(url, {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`\n    }\n  });\n  if (!response.ok) {\n    console.error('Failed to fetch top artists. Status:', response.status);\n    const errorData = await response.json();\n    console.error('Error data:', errorData);\n    throw new Error('Failed to fetch top artists');\n  }\n  const data = await response.json();\n  console.log('Top Artists Data:', data); // Log the response data\n  return data;\n}\nexport async function fetchWeatherData(city) {\n  try {\n    const response = await fetch(apiUrl + city + `&appid=${apiKey}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    localStorage.setItem('lastCity', city);\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    console.error(error);\n    return {\n      data: null,\n      error: 'Error fetching weather data. Please try again later.'\n    };\n  }\n}\nexport async function getTopTracks(accessToken) {\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me/top/tracks?limit=10', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      console.error('Failed to fetch top tracks. Status:', response.status);\n      const errorData = await response.json();\n      console.error('Error data:', errorData);\n      throw new Error('Failed to fetch top tracks');\n    }\n    const data = await response.json();\n    console.log('Top Tracks Data:', data); // Log the response data\n    return data;\n  } catch (error) {\n    console.error('Error fetching top tracks:', error);\n    throw error;\n  }\n}\nexport const getRecommendations = async (accessToken, seedArtists, seedGenres, seedTracks) => {\n  let url = `https://api.spotify.com/v1/recommendations?seed_genres=${seedGenres}`;\n  if (seedArtists) {\n    url += `&seed_artists=${seedArtists}`;\n  }\n  if (seedTracks) {\n    url += `&seed_tracks=${seedTracks}`;\n  }\n  const response = await fetch(url, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch recommendations');\n  }\n  return response.json();\n};\nexport async function createPlaylist(accessToken, userId, weatherData) {\n  const cityName = weatherData.name; // Extract city name from weather data\n  const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n  const formattedDate = `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}`;\n  const playlistName = `${cityName}-${weatherCondition}_${formattedDate}`;\n  const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: playlistName,\n      public: true\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create playlist');\n  }\n  return response.json();\n}\nexport async function getRecommendedArtists(accessToken, seedGenres, minPopularity, maxPopularity, limit = 5) {\n  try {\n    // Ensure seedGenres is an array\n    if (!Array.isArray(seedGenres)) {\n      throw new Error('seedGenres must be an array');\n    }\n\n    // Construct query parameters\n    const queryParams = new URLSearchParams({\n      limit: limit,\n      seed_genres: seedGenres.join(','),\n      min_popularity: minPopularity,\n      max_popularity: maxPopularity\n    });\n\n    // Construct the URL for recommendations\n    const url = `https://api.spotify.com/v1/recommendations?${queryParams}`;\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch recommended artists. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Recommended Artists Data:', data); // Log the response data\n\n    return data;\n  } catch (error) {\n    console.error('Error fetching recommended artists:', error);\n    throw error;\n  }\n}\n\n// Define popularityValues\n// Utils.js\n\nexport const popularityValues = {\n  Niche: {\n    min: 0,\n    max: 25\n  },\n  Underground: {\n    min: 26,\n    max: 50\n  },\n  Popular: {\n    min: 51,\n    max: 75\n  },\n  VeryPopular: {\n    min: 76,\n    max: 100\n  }\n};\nexport async function searchMusicRecommendations(accessToken, selectedGenre, tempo, popularity, limit) {\n  try {\n    const queryParams = new URLSearchParams({\n      seed_genres: selectedGenre || '',\n      min_tempo: tempo === 'fast' ? 120 : tempo === 'slow' ? 60 : 90,\n      max_tempo: tempo === 'fast' ? 180 : tempo === 'slow' ? 90 : 120,\n      min_popularity: popularity.min,\n      max_popularity: popularity.max,\n      limit: limit >= 10 && limit <= 30 ? limit : 10\n    });\n    const url = `https://api.spotify.com/v1/recommendations?${queryParams}`;\n    console.log('Fetching recommendations from:', url); // Add this line for logging\n\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch recommendations');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching recommended tracks:', error);\n    throw error;\n  }\n}\nexport const saveAsImage = async elementId => {\n  const element = document.getElementById(elementId);\n  try {\n    const canvas = await html2canvas(element);\n    const image = canvas.toDataURL('image/png');\n    const link = document.createElement('a');\n    link.download = 'weather_data.png';\n    link.href = image;\n    link.click();\n  } catch (error) {\n    console.error('Error saving image:', error);\n  }\n};\nexport const loggedin = () => {\n  // Implementation for checking if user is logged in\n  const accessToken = localStorage.getItem('access_token');\n  return !!accessToken; // Returns true if accessToken is present\n};\n\n// Function to play an audio preview\nexport const playPreview = (previewUrl, setCurrentPreview) => {\n  const audio = new Audio(previewUrl);\n  audio.play();\n  setCurrentPreview(audio); // Set the current audio element\n  return audio; // Return the audio element for further control\n};\n\n// Function to pause the currently playing audio preview\nexport const pausePreview = currentPreview => {\n  if (currentPreview instanceof Audio) {\n    currentPreview.pause();\n  }\n};","map":{"version":3,"names":["openWeatherApiKey","openWeatherApiUrl","spotifyClientId","spotifyClientSecret","spotifyRedirectUri","html2canvas","apiKey","clientId","clientSecret","redirectUri","apiUrl","authenticate","scopes","window","location","href","join","handleAuthorizationCode","params","URLSearchParams","search","authorizationCode","get","response","fetch","method","headers","Authorization","btoa","body","ok","Error","status","data","json","accessToken","access_token","localStorage","setItem","Date","now","error","console","getItem","refreshToken","loginTime","currentTime","sessionDuration","parseInt","newAccessToken","refreshAccessToken","log","refreshError","handleLogout","logoutCallback","removeItem","getProfile","clientCredentials","spotifyTokenResponse","cache","spotifyTokenData","getTopArtists","url","errorData","fetchWeatherData","city","getTopTracks","getRecommendations","seedArtists","seedGenres","seedTracks","createPlaylist","userId","weatherData","cityName","name","weatherCondition","weather","main","toLowerCase","formattedDate","getDate","getMonth","getFullYear","playlistName","JSON","stringify","public","getRecommendedArtists","minPopularity","maxPopularity","limit","Array","isArray","queryParams","seed_genres","min_popularity","max_popularity","popularityValues","Niche","min","max","Underground","Popular","VeryPopular","searchMusicRecommendations","selectedGenre","tempo","popularity","min_tempo","max_tempo","saveAsImage","elementId","element","document","getElementById","canvas","image","toDataURL","link","createElement","download","click","loggedin","playPreview","previewUrl","setCurrentPreview","audio","Audio","play","pausePreview","currentPreview","pause"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Utils.js"],"sourcesContent":["import { openWeatherApiKey, openWeatherApiUrl, spotifyClientId, spotifyClientSecret, spotifyRedirectUri } from './ApiKeys';\nimport html2canvas from 'html2canvas';\n\nexport const apiKey = openWeatherApiKey;\nexport const clientId = spotifyClientId;\nexport const clientSecret = spotifyClientSecret;\nexport const redirectUri = spotifyRedirectUri;\nexport const apiUrl = openWeatherApiUrl;\n\nexport async function authenticate() {\n    // Function to handle authentication flow\n    // Redirect user to Spotify authorization endpoint\n    const scopes = [\n        'user-read-private', \n        'user-read-email', \n        'user-top-read', \n        'playlist-modify-public', \n        'playlist-modify-private'\n    ]; // Add necessary scopes for playlist modification\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=code`;\n}\n\nexport async function handleAuthorizationCode() {\n    const params = new URLSearchParams(window.location.search);\n    const authorizationCode = params.get('code');\n\n    if (authorizationCode) {\n        try {\n            const response = await fetch('https://accounts.spotify.com/api/token', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n                },\n                body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${redirectUri}`\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to exchange authorization code for access token. Status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            const accessToken = data.access_token;\n\n            if (!accessToken) {\n                throw new Error('Access token not found in response');\n            }\n\n            localStorage.setItem('access_token', accessToken);\n            localStorage.setItem('login_time', Date.now()); // Update login time\n            window.location.href = '/';\n        } catch (error) {\n            console.error('Error exchanging authorization code:', error);\n        }\n    } else {\n        const accessToken = localStorage.getItem('access_token');\n        const refreshToken = localStorage.getItem('refresh_token');\n        const loginTime = localStorage.getItem('login_time');\n\n        if (accessToken && refreshToken && loginTime) {\n            const currentTime = Date.now();\n            const sessionDuration = 60 * 60 * 1000; // Session duration in milliseconds (1 hour)\n\n            if (currentTime - parseInt(loginTime) > sessionDuration) {\n                // Session expired, refresh access token\n                try {\n                    const newAccessToken = await refreshAccessToken(refreshToken);\n                    localStorage.setItem('access_token', newAccessToken);\n                    localStorage.setItem('login_time', Date.now()); // Update login time\n                    console.log('Access Token Refreshed:', newAccessToken);\n                } catch (refreshError) {\n                    console.error('Error refreshing access token:', refreshError);\n                    handleLogout(); // Log out user if refresh token fails\n                }\n            }\n        }\n    }\n}\n\n// Utils.js\n\nexport async function handleLogout(logoutCallback) {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('login_time'); // Remove login time on logout\n    logoutCallback(false); // Call the callback function to update login state\n    window.location.href = '/';\n}\n\n\nexport async function getProfile(accessToken) {\n    // Function to fetch user's profile\n    try {\n        const response = await fetch('https://api.spotify.com/v1/me', {\n            headers: {\n                Authorization: 'Bearer ' + accessToken\n            }\n        });\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching user profile:', error);\n        throw error;\n    }\n}\n\nexport async function refreshAccessToken(refreshToken) {\n    // Function to refresh access token\n    const clientCredentials = btoa(`${clientId}:${clientSecret}`);\n    const spotifyTokenResponse = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: `Basic ${clientCredentials}`,\n        },\n        body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n        cache: \"no-cache\"\n    });\n\n    const spotifyTokenData = await spotifyTokenResponse.json();\n    return spotifyTokenData.access_token;\n}\n\nexport async function getTopArtists(accessToken) {\n    // Function to fetch user's top artists\n    console.log('Access Token:', accessToken); // Log the access token\n    const url = 'https://api.spotify.com/v1/me/top/artists?limit=5';\n    const response = await fetch(url, {\n        headers: {\n            'Authorization': `Bearer ${accessToken}`\n        }\n    });\n    if (!response.ok) {\n        console.error('Failed to fetch top artists. Status:', response.status);\n        const errorData = await response.json();\n        console.error('Error data:', errorData);\n        throw new Error('Failed to fetch top artists');\n    }\n    const data = await response.json();\n    console.log('Top Artists Data:', data); // Log the response data\n    return data;\n}\n\nexport async function fetchWeatherData(city) {\n    try {\n        const response = await fetch(apiUrl + city + `&appid=${apiKey}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        localStorage.setItem('lastCity', city);\n        return { data, error: null };\n    } catch (error) {\n        console.error(error);\n        return { data: null, error: 'Error fetching weather data. Please try again later.' };\n    }\n}\n\nexport async function getTopTracks(accessToken) {\n    try {\n        const response = await fetch('https://api.spotify.com/v1/me/top/tracks?limit=10', {\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            }\n        });\n\n        if (!response.ok) {\n            console.error('Failed to fetch top tracks. Status:', response.status);\n            const errorData = await response.json();\n            console.error('Error data:', errorData);\n            throw new Error('Failed to fetch top tracks');\n        }\n\n        const data = await response.json();\n        console.log('Top Tracks Data:', data); // Log the response data\n        return data;\n    } catch (error) {\n        console.error('Error fetching top tracks:', error);\n        throw error;\n    }\n}\n\nexport const getRecommendations = async (accessToken, seedArtists, seedGenres, seedTracks) => {\n    let url = `https://api.spotify.com/v1/recommendations?seed_genres=${seedGenres}`;\n    if (seedArtists) {\n        url += `&seed_artists=${seedArtists}`;\n    }\n    if (seedTracks) {\n        url += `&seed_tracks=${seedTracks}`;\n    }\n    const response = await fetch(url, {\n        headers: {\n            Authorization: `Bearer ${accessToken}`,\n        },\n    });\n    if (!response.ok) {\n        throw new Error('Failed to fetch recommendations');\n    }\n    return response.json();\n};\n\nexport async function createPlaylist(accessToken, userId, weatherData) {\n    const cityName = weatherData.name; // Extract city name from weather data\n    const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n    const formattedDate = `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}`;\n    const playlistName = `${cityName}-${weatherCondition}_${formattedDate}`;\n\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            name: playlistName,\n            public: true,\n        }),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to create playlist');\n    }\n    return response.json();\n}\n\nexport async function getRecommendedArtists(accessToken, seedGenres, minPopularity, maxPopularity, limit = 5) {\n    try {\n        // Ensure seedGenres is an array\n        if (!Array.isArray(seedGenres)) {\n            throw new Error('seedGenres must be an array');\n        }\n\n        // Construct query parameters\n        const queryParams = new URLSearchParams({\n            limit: limit,\n            seed_genres: seedGenres.join(','),\n            min_popularity: minPopularity,\n            max_popularity: maxPopularity\n        });\n\n        // Construct the URL for recommendations\n        const url = `https://api.spotify.com/v1/recommendations?${queryParams}`;\n\n        const response = await fetch(url, {\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch recommended artists. Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log('Recommended Artists Data:', data); // Log the response data\n        \n        return data;\n    } catch (error) {\n        console.error('Error fetching recommended artists:', error);\n        throw error;\n    }\n}\n\n// Define popularityValues\n// Utils.js\n\nexport const popularityValues = {\n    Niche: { min: 0, max: 25 },\n    Underground: { min: 26, max: 50 },\n    Popular: { min: 51, max: 75 },\n    VeryPopular: { min: 76, max: 100 }\n  };\n  \n  \n  export async function searchMusicRecommendations(accessToken, selectedGenre, tempo, popularity, limit) {\n    try {\n        const queryParams = new URLSearchParams({\n            seed_genres: selectedGenre || '',\n            min_tempo: tempo === 'fast' ? 120 : tempo === 'slow' ? 60 : 90,\n            max_tempo: tempo === 'fast' ? 180 : tempo === 'slow' ? 90 : 120,\n            min_popularity: popularity.min,\n            max_popularity: popularity.max,\n            limit: limit >= 10 && limit <= 30 ? limit : 10,\n        });\n\n        const url = `https://api.spotify.com/v1/recommendations?${queryParams}`;\n        \n        console.log('Fetching recommendations from:', url); // Add this line for logging\n        \n        const response = await fetch(url, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to fetch recommendations');\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching recommended tracks:', error);\n        throw error;\n    }\n}\n\nexport const saveAsImage = async (elementId) => {\n    const element = document.getElementById(elementId);\n    try {\n        const canvas = await html2canvas(element);\n        const image = canvas.toDataURL('image/png');\n        const link = document.createElement('a');\n        link.download = 'weather_data.png';\n        link.href = image;\n        link.click();\n    } catch (error) {\n        console.error('Error saving image:', error);\n    }\n};\n\nexport const loggedin = () => {\n    // Implementation for checking if user is logged in\n    const accessToken = localStorage.getItem('access_token');\n    return !!accessToken; // Returns true if accessToken is present\n  };\n\n\n// Function to play an audio preview\nexport const playPreview = (previewUrl, setCurrentPreview) => {\n    const audio = new Audio(previewUrl);\n    audio.play();\n    setCurrentPreview(audio); // Set the current audio element\n    return audio; // Return the audio element for further control\n  };\n  \n  // Function to pause the currently playing audio preview\n  export const pausePreview = (currentPreview) => {\n    if (currentPreview instanceof Audio) {\n      currentPreview.pause();\n    }\n  };\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}