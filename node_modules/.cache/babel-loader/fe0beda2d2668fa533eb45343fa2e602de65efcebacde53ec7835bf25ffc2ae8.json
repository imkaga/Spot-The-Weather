{"ast":null,"code":"import { openWeatherApiKey, openWeatherApiUrl, spotifyClientId, spotifyClientSecret, spotifyRedirectUri } from './ApiKeys';\nexport const apiKey = openWeatherApiKey;\nexport const clientId = spotifyClientId;\nexport const clientSecret = spotifyClientSecret;\nexport const redirectUri = spotifyRedirectUri;\nexport const apiUrl = openWeatherApiUrl;\nexport async function authenticate() {\n  // Function to handle authentication flow\n  // Redirect user to Spotify authorization endpoint\n  const scopes = ['user-read-private', 'user-read-email', 'user-top-read']; // Add necessary scopes\n  window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=code`;\n}\n\n// Utils.js\n\nexport async function handleAuthorizationCode() {\n  const params = new URLSearchParams(window.location.search);\n  const authorizationCode = params.get('code');\n  if (authorizationCode) {\n    try {\n      const response = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n        },\n        body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${redirectUri}`\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to exchange authorization code for access token. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      const accessToken = data.access_token;\n      if (!accessToken) {\n        throw new Error('Access token not found in response');\n      }\n      localStorage.setItem('access_token', accessToken);\n\n      // Fetch user profile\n      const profile = await getProfile(accessToken);\n\n      // Store user ID in localStorage\n      localStorage.setItem('user_id', profile.id);\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Error exchanging authorization code:', error);\n    }\n  }\n}\nexport async function getProfile(accessToken) {\n  // Function to fetch user's profile\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me', {\n      headers: {\n        Authorization: 'Bearer ' + accessToken\n      }\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    throw error;\n  }\n}\nexport async function refreshAccessToken(refreshToken) {\n  // Function to refresh access token\n  const clientCredentials = btoa(`${clientId}:${clientSecret}`);\n  const spotifyTokenResponse = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${clientCredentials}`\n    },\n    body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n    cache: \"no-cache\"\n  });\n  const spotifyTokenData = await spotifyTokenResponse.json();\n  return spotifyTokenData.access_token;\n}\nexport async function getTopArtists(accessToken) {\n  // Function to fetch user's top artists\n  console.log('Access Token:', accessToken); // Log the access token\n  const url = 'https://api.spotify.com/v1/me/top/artists?limit=5';\n  const response = await fetch(url, {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`\n    }\n  });\n  if (!response.ok) {\n    console.error('Failed to fetch top artists. Status:', response.status);\n    const errorData = await response.json();\n    console.error('Error data:', errorData);\n    throw new Error('Failed to fetch top artists');\n  }\n  const data = await response.json();\n  console.log('Top Artists Data:', data); // Log the response data\n  return data;\n}\n\n// Other imports and exports remain the same\n\nexport async function fetchWeatherData(city) {\n  try {\n    const response = await fetch(apiUrl + city + `&appid=${apiKey}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    localStorage.setItem('lastCity', city);\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    console.error(error);\n    return {\n      data: null,\n      error: 'Error fetching weather data. Please try again later.'\n    };\n  }\n}\nexport async function getTopTracks(accessToken) {\n  try {\n    const response = await fetch('https://api.spotify.com/v1/me/top/tracks?limit=10', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      console.error('Failed to fetch top tracks. Status:', response.status);\n      const errorData = await response.json();\n      console.error('Error data:', errorData);\n      throw new Error('Failed to fetch top tracks');\n    }\n    const data = await response.json();\n    console.log('Top Tracks Data:', data); // Log the response data\n    return data;\n  } catch (error) {\n    console.error('Error fetching top tracks:', error);\n    throw error;\n  }\n}\n\n// Utils.js\n\nexport const getRecommendations = async (accessToken, seedArtists, seedGenres, seedTracks) => {\n  let url = `https://api.spotify.com/v1/recommendations?seed_genres=${seedGenres}`;\n  if (seedArtists) {\n    url += `&seed_artists=${seedArtists}`;\n  }\n  if (seedTracks) {\n    url += `&seed_tracks=${seedTracks}`;\n  }\n  const response = await fetch(url, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch recommendations');\n  }\n  return response.json();\n};\nexport const createPlaylist = async (accessToken, userId, playlistName) => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: playlistName,\n        public: true // Change to false if you want the playlist to be private\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create playlist');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating playlist:', error);\n    throw error;\n  }\n};\nexport const addTracksToPlaylist = async (accessToken, userId, playlistId, trackUris) => {\n  try {\n    const response = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        uris: trackUris\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add tracks to playlist');\n    }\n    console.log('Tracks added to playlist successfully!');\n  } catch (error) {\n    console.error('Error adding tracks to playlist:', error);\n    throw error;\n  }\n};\nexport const getCurrentDate = () => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  return `${day}-${month}-${year}`;\n};","map":{"version":3,"names":["openWeatherApiKey","openWeatherApiUrl","spotifyClientId","spotifyClientSecret","spotifyRedirectUri","apiKey","clientId","clientSecret","redirectUri","apiUrl","authenticate","scopes","window","location","href","join","handleAuthorizationCode","params","URLSearchParams","search","authorizationCode","get","response","fetch","method","headers","Authorization","btoa","body","ok","Error","status","data","json","accessToken","access_token","localStorage","setItem","profile","getProfile","id","error","console","refreshAccessToken","refreshToken","clientCredentials","spotifyTokenResponse","cache","spotifyTokenData","getTopArtists","log","url","errorData","fetchWeatherData","city","getTopTracks","getRecommendations","seedArtists","seedGenres","seedTracks","createPlaylist","userId","playlistName","JSON","stringify","name","public","addTracksToPlaylist","playlistId","trackUris","uris","getCurrentDate","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Utils.js"],"sourcesContent":["import { openWeatherApiKey, openWeatherApiUrl, spotifyClientId, spotifyClientSecret, spotifyRedirectUri } from './ApiKeys';\n\nexport const apiKey = openWeatherApiKey;\nexport const clientId = spotifyClientId;\nexport const clientSecret = spotifyClientSecret;\nexport const redirectUri = spotifyRedirectUri;\nexport const apiUrl = openWeatherApiUrl;\n\nexport async function authenticate() {\n    // Function to handle authentication flow\n    // Redirect user to Spotify authorization endpoint\n    const scopes = ['user-read-private', 'user-read-email', 'user-top-read']; // Add necessary scopes\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=code`;\n}\n\n// Utils.js\n\nexport async function handleAuthorizationCode() {\n    const params = new URLSearchParams(window.location.search);\n    const authorizationCode = params.get('code');\n\n    if (authorizationCode) {\n        try {\n            const response = await fetch('https://accounts.spotify.com/api/token', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n                },\n                body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${redirectUri}`\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to exchange authorization code for access token. Status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            const accessToken = data.access_token;\n\n            if (!accessToken) {\n                throw new Error('Access token not found in response');\n            }\n\n            localStorage.setItem('access_token', accessToken);\n            \n            // Fetch user profile\n            const profile = await getProfile(accessToken);\n            \n            // Store user ID in localStorage\n            localStorage.setItem('user_id', profile.id);\n\n            window.location.href = '/';\n        } catch (error) {\n            console.error('Error exchanging authorization code:', error);\n        }\n    }\n}\n\n\nexport async function getProfile(accessToken) {\n    // Function to fetch user's profile\n    try {\n        const response = await fetch('https://api.spotify.com/v1/me', {\n            headers: {\n                Authorization: 'Bearer ' + accessToken\n            }\n        });\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching user profile:', error);\n        throw error;\n    }\n}\n\nexport async function refreshAccessToken(refreshToken) {\n    // Function to refresh access token\n    const clientCredentials = btoa(`${clientId}:${clientSecret}`);\n    const spotifyTokenResponse = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: `Basic ${clientCredentials}`,\n        },\n        body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n        cache: \"no-cache\"\n    });\n\n    const spotifyTokenData = await spotifyTokenResponse.json();\n    return spotifyTokenData.access_token;\n}\n\nexport async function getTopArtists(accessToken) {\n    // Function to fetch user's top artists\n    console.log('Access Token:', accessToken); // Log the access token\n    const url = 'https://api.spotify.com/v1/me/top/artists?limit=5';\n    const response = await fetch(url, {\n        headers: {\n            'Authorization': `Bearer ${accessToken}`\n        }\n    });\n    if (!response.ok) {\n        console.error('Failed to fetch top artists. Status:', response.status);\n        const errorData = await response.json();\n        console.error('Error data:', errorData);\n        throw new Error('Failed to fetch top artists');\n    }\n    const data = await response.json();\n    console.log('Top Artists Data:', data); // Log the response data\n    return data;\n}\n\n// Other imports and exports remain the same\n\nexport async function fetchWeatherData(city) {\n    try {\n        const response = await fetch(apiUrl + city + `&appid=${apiKey}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        localStorage.setItem('lastCity', city);\n        return { data, error: null };\n    } catch (error) {\n        console.error(error);\n        return { data: null, error: 'Error fetching weather data. Please try again later.' };\n    }\n}\n\nexport async function getTopTracks(accessToken) {\n    try {\n        const response = await fetch('https://api.spotify.com/v1/me/top/tracks?limit=10', {\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            }\n        });\n\n        if (!response.ok) {\n            console.error('Failed to fetch top tracks. Status:', response.status);\n            const errorData = await response.json();\n            console.error('Error data:', errorData);\n            throw new Error('Failed to fetch top tracks');\n        }\n\n        const data = await response.json();\n        console.log('Top Tracks Data:', data); // Log the response data\n        return data;\n    } catch (error) {\n        console.error('Error fetching top tracks:', error);\n        throw error;\n    }\n}\n\n// Utils.js\n\nexport const getRecommendations = async (accessToken, seedArtists, seedGenres, seedTracks) => {\n    let url = `https://api.spotify.com/v1/recommendations?seed_genres=${seedGenres}`;\n    if (seedArtists) {\n        url += `&seed_artists=${seedArtists}`;\n    }\n    if (seedTracks) {\n        url += `&seed_tracks=${seedTracks}`;\n    }\n    const response = await fetch(url, {\n        headers: {\n            Authorization: `Bearer ${accessToken}`,\n        },\n    });\n    if (!response.ok) {\n        throw new Error('Failed to fetch recommendations');\n    }\n    return response.json();\n};\n\n\nexport const createPlaylist = async (accessToken, userId, playlistName) => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: playlistName,\n                public: true // Change to false if you want the playlist to be private\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to create playlist');\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error creating playlist:', error);\n        throw error;\n    }\n};\n\nexport const addTracksToPlaylist = async (accessToken, userId, playlistId, trackUris) => {\n    try {\n        const response = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                uris: trackUris\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to add tracks to playlist');\n        }\n\n        console.log('Tracks added to playlist successfully!');\n    } catch (error) {\n        console.error('Error adding tracks to playlist:', error);\n        throw error;\n    }\n};\n\nexport const getCurrentDate = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    return `${day}-${month}-${year}`;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}