{"ast":null,"code":"var _jsxFileName = \"/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/GetArtists.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getTopArtists, loggedin } from './Utils'; // Import the necessary functions from utils.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetArtists = () => {\n  _s();\n  const [artists, setArtists] = useState([]);\n  useEffect(() => {\n    const fetchTopArtistsData = async () => {\n      try {\n        // Check if the user is logged in (i.e., has an access token)\n        if (!loggedin()) {\n          // Handle not logged in scenario (redirect to login)\n          // Implement your logic here to redirect the user to the login page\n          console.log('User not logged in');\n          return;\n        }\n\n        // Get the access token from localStorage\n        const accessToken = localStorage.getItem('access_token');\n\n        // Fetch the user's top artists using the access token\n        const topArtistsData = await getTopArtists(accessToken);\n\n        // Set the retrieved artists into state\n        setArtists(topArtistsData.items);\n      } catch (error) {\n        console.error('Error fetching top artists:', error);\n      }\n    };\n\n    // Call the function to fetch data when the component mounts\n    fetchTopArtistsData();\n  }, []); // Empty dependency array ensures this effect runs once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Top 10 Artists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: artists.map(artist => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: artist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Genres: \", artist.genres.join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Popularity: \", artist.popularity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: artist.images.length > 0 ? artist.images[0].url : '',\n          alt: artist.name,\n          style: {\n            maxWidth: '200px',\n            maxHeight: '200px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, artist.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(GetArtists, \"myO3VIklrIMVqFD52MxwExKe+k4=\");\n_c = GetArtists;\nexport default GetArtists;\nvar _c;\n$RefreshReg$(_c, \"GetArtists\");","map":{"version":3,"names":["React","useState","useEffect","getTopArtists","loggedin","jsxDEV","_jsxDEV","GetArtists","_s","artists","setArtists","fetchTopArtistsData","console","log","accessToken","localStorage","getItem","topArtistsData","items","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","artist","name","genres","join","popularity","src","images","length","url","alt","style","maxWidth","maxHeight","id","_c","$RefreshReg$"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/GetArtists.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getTopArtists, loggedin } from './Utils'; // Import the necessary functions from utils.js\n\nconst GetArtists = () => {\n  const [artists, setArtists] = useState([]);\n\n  useEffect(() => {\n    const fetchTopArtistsData = async () => {\n      try {\n        // Check if the user is logged in (i.e., has an access token)\n        if (!loggedin()) {\n          // Handle not logged in scenario (redirect to login)\n          // Implement your logic here to redirect the user to the login page\n          console.log('User not logged in');\n          return;\n        }\n\n        // Get the access token from localStorage\n        const accessToken = localStorage.getItem('access_token');\n\n        // Fetch the user's top artists using the access token\n        const topArtistsData = await getTopArtists(accessToken);\n\n        // Set the retrieved artists into state\n        setArtists(topArtistsData.items);\n      } catch (error) {\n        console.error('Error fetching top artists:', error);\n      }\n    };\n\n    // Call the function to fetch data when the component mounts\n    fetchTopArtistsData();\n  }, []); // Empty dependency array ensures this effect runs once on component mount\n\n  return (\n    <div>\n      <h2>My Top 10 Artists</h2>\n      <ul>\n        {artists.map((artist) => (\n          <li key={artist.id}>\n            <h3>{artist.name}</h3>\n            <p>Genres: {artist.genres.join(', ')}</p>\n            <p>Popularity: {artist.popularity}</p>\n            <img\n              src={artist.images.length > 0 ? artist.images[0].url : ''}\n              alt={artist.name}\n              style={{ maxWidth: '200px', maxHeight: '200px' }}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default GetArtists;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,EAAEC,QAAQ,QAAQ,SAAS,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMS,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF;QACA,IAAI,CAACP,QAAQ,CAAC,CAAC,EAAE;UACf;UACA;UACAQ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;UACjC;QACF;;QAEA;QACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;;QAExD;QACA,MAAMC,cAAc,GAAG,MAAMd,aAAa,CAACW,WAAW,CAAC;;QAEvD;QACAJ,UAAU,CAACO,cAAc,CAACC,KAAK,CAAC;MAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;;IAED;IACAR,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BlB,OAAA;MAAAc,QAAA,EACGX,OAAO,CAACgB,GAAG,CAAEC,MAAM,iBAClBpB,OAAA;QAAAc,QAAA,gBACEd,OAAA;UAAAc,QAAA,EAAKM,MAAM,CAACC;QAAI;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACtBlB,OAAA;UAAAc,QAAA,GAAG,UAAQ,EAACM,MAAM,CAACE,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzClB,OAAA;UAAAc,QAAA,GAAG,cAAY,EAACM,MAAM,CAACI,UAAU;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtClB,OAAA;UACEyB,GAAG,EAAEL,MAAM,CAACM,MAAM,CAACC,MAAM,GAAG,CAAC,GAAGP,MAAM,CAACM,MAAM,CAAC,CAAC,CAAC,CAACE,GAAG,GAAG,EAAG;UAC1DC,GAAG,EAAET,MAAM,CAACC,IAAK;UACjBS,KAAK,EAAE;YAAEC,QAAQ,EAAE,OAAO;YAAEC,SAAS,EAAE;UAAQ;QAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CAAC;MAAA,GARKE,MAAM,CAACa,EAAE;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASd,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAChB,EAAA,CAlDID,UAAU;AAAAiC,EAAA,GAAVjC,UAAU;AAoDhB,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}