{"ast":null,"code":"var _jsxFileName = \"/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as Utils from './Utils'; // Import functions from Utils.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [city, setCity] = useState(''); // State for storing the city input\n  const [weatherData, setWeatherData] = useState(null); // State for storing weather data\n  const [errorMessage, setErrorMessage] = useState(''); // State for error messages\n  const [userName, setUserName] = useState(''); // State for storing user's name\n  const [loggedIn, setLoggedIn] = useState(false); // State for user login status\n  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'main'); // State for storing theme\n  const [recommendedTracks, setRecommendedTracks] = useState(() => JSON.parse(localStorage.getItem('recommendedTracks')) || []); // State for storing recommended tracks\n  const [userId, setUserId] = useState(''); // State for storing user's Spotify user ID\n  const [refreshCount, setRefreshCount] = useState(0); // State for storing the refresh count\n  const [lastRefreshTime, setLastRefreshTime] = useState(() => parseInt(localStorage.getItem('lastRefreshTime')) || null); // State for storing the last refresh time\n  const [countdown, setCountdown] = useState(null); // State for countdown until next refresh\n  const [showButton, setShowButton] = useState(true); // State for showing or hiding the refresh button\n  const [lastActivityTime, setLastActivityTime] = useState(Date.now()); // State for tracking user activity\n  const [sessionExpired, setSessionExpired] = useState(false); // State for session expiration popup // W RAZIE CZEGO DO WYRZUCENIA\n  const [currentPreview, setCurrentPreview] = useState(null); // State to track current audio preview\n  const [playingTrack, setPlayingTrack] = useState(null); // State to track the currently playing track\n  const [isPlaying, setIsPlaying] = useState(false);\n  const history = useHistory(); // React Router history\n\n  const handleLogin = Utils.authenticate; // Function for handling login\n\n  const handleLogout = () => {\n    Utils.handleLogout(setLoggedIn); // Pass setLoggedIn as an argument\n  };\n  useEffect(() => {\n    // Effect for handling authorization code\n    Utils.handleAuthorizationCode().then(() => {\n      const accessToken = localStorage.getItem('access_token');\n      if (accessToken) {\n        console.log('Access Token:', accessToken); // Logging access token\n        Utils.getProfile(accessToken).then(data => {\n          if (data) {\n            console.log('User Profile:', data); // Logging user profile\n            setUserName(data.display_name); // Setting user's name\n            setUserId(data.id); // Set the user's Spotify user ID\n          }\n        }).catch(error => {\n          console.error('Error fetching user profile:', error);\n        });\n      } else {\n        console.error('Access token not found');\n      }\n    }).catch(error => {\n      console.error('Error handling authorization code:', error);\n    });\n  }, []);\n  useEffect(() => {\n    // Check login status and session expiry on component mount\n    checkLoginStatus();\n    // Add event listener for user activity\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('keypress', handleUserActivity);\n    return () => {\n      // Cleanup event listener on component unmount\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('keypress', handleUserActivity);\n    };\n  }, []);\n  useEffect(() => {\n    // Check login status and session expiry when last activity time changes\n    checkLoginStatus();\n  }, [lastActivityTime]);\n  const checkLoginStatus = () => {\n    const loginTime = localStorage.getItem('login_time');\n    const isLoggedIn = localStorage.getItem('access_token') !== null;\n    if (isLoggedIn && loginTime) {\n      const currentTime = Date.now();\n      const sessionDuration = 60 * 60 * 1000; // Session duration in milliseconds (1 hour)\n\n      if (currentTime - parseInt(loginTime) > sessionDuration) {\n        // Session expired, logout user\n        handleLogout();\n      } else {\n        setLoggedIn(true);\n      }\n    }\n  };\n  const handleUnauthorizedError = error => {\n    if (error.response && error.response.status === 401) {\n      setSessionExpired(true); // Set session expiration state\n      handleLogout(); // Log out the user\n    }\n  };\n  useEffect(() => {\n    // Add event listener for route changes\n    const unlisten = history.listen(() => {\n      handlePause(); // Pause the song when route changes\n    });\n    return () => {\n      unlisten(); // Cleanup event listener on component unmount\n    };\n  }, [history]);\n  useEffect(() => {\n    if (sessionExpired) {\n      alert('Sesja wygasła. (401)'); // Display popup for session expiration\n    }\n  }, [sessionExpired]);\n  const handleUserActivity = () => {\n    // Update last activity time when user interacts with the page\n    setLastActivityTime(Date.now());\n  };\n  const handleBeforeUnload = () => {\n    // Clear recommended tracks from local storage when the user closes the app\n    localStorage.removeItem('recommendedTracks');\n  };\n  useEffect(() => {\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  useEffect(() => {\n    // Effect for setting city and fetching weather data\n    const lastCity = localStorage.getItem('lastCity');\n    if (lastCity) {\n      setCity(lastCity);\n      Utils.fetchWeatherData(lastCity).then(({\n        data,\n        error\n      }) => {\n        if (error) {\n          setErrorMessage(error);\n        } else {\n          setWeatherData(data);\n          setErrorMessage('');\n        }\n      });\n    }\n    const accessToken = localStorage.getItem('access_token');\n    if (accessToken) {\n      Utils.getProfile(accessToken).then(data => {\n        if (data) {\n          setUserName(data.display_name);\n        }\n      }).catch(error => {\n        console.error('Error fetching user profile:', error);\n      });\n    } else {\n      console.error('Access token not found');\n    }\n  }, []);\n  useEffect(() => {\n    // Effect for handling access token and user profile\n    const accessToken = localStorage.getItem('access_token');\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (accessToken) {\n      Utils.getProfile(accessToken, refreshToken).then(data => {\n        if (data) {\n          setUserName(data.display_name);\n          setLoggedIn(true);\n        }\n      }).catch(error => {\n        console.error('Error fetching user profile:', error);\n        if (error.response && error.response.status === 401) {\n          handleLogout(); // Log out user if 401 error occurs\n        }\n      });\n    } else {\n      console.error('Access token not found');\n    }\n  }, []);\n  useEffect(() => {\n    // Effect for setting theme\n    document.body.classList.toggle('light-theme', theme === 'light');\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  useEffect(() => {\n    // Effect for handling countdown until next refresh\n    const storedLastRefreshTime = localStorage.getItem('lastRefreshTime');\n    if (storedLastRefreshTime) {\n      const remainingTime = 5 * 60 * 1000 - (Date.now() - parseInt(storedLastRefreshTime));\n      if (remainingTime > 0) {\n        setCountdown(remainingTime);\n        setShowButton(false); // Hide the button when countdown starts\n      }\n    }\n  }, []);\n  useEffect(() => {\n    const storedRecommendedTracks = localStorage.getItem('recommendedTracks');\n    if (storedRecommendedTracks) {\n      setRecommendedTracks(JSON.parse(storedRecommendedTracks));\n    }\n  }, []);\n  useEffect(() => {\n    return () => {\n      if (currentPreview) {\n        Utils.pausePreview(currentPreview); // Pause the audio preview\n        setCurrentPreview(null); // Reset current audio preview\n        setPlayingTrack(null); // Reset playing track\n        setIsPlaying(false); // Reset playing state\n      }\n    };\n  }, []);\n  useEffect(() => {\n    // Effect for updating countdown timer\n    if (countdown !== null) {\n      const timer = setInterval(() => {\n        setCountdown(prevCountdown => {\n          if (prevCountdown <= 0) {\n            clearInterval(timer);\n            setShowButton(true); // Show the button when countdown ends\n            return 0;\n          } else {\n            return prevCountdown - 1000;\n          }\n        });\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [countdown]);\n  const handleSearch = () => {\n    // Function for handling search\n    Utils.fetchWeatherData(city).then(({\n      data,\n      error\n    }) => {\n      if (error) {\n        setErrorMessage(error);\n        // Alert the user for an invalid city name\n        alert('Niepoprawna nawzwa miejscowości');\n      } else {\n        setWeatherData(data);\n        setErrorMessage('');\n        //localStorage.setItem('lastCity', city);\n        // setRefreshCount(0); // Reset refresh count when city is changed\n        setShowButton(true); // Show the button after search\n      }\n    });\n  };\n  const handleChange = e => {\n    // Function for handling input change\n    setCity(e.target.value);\n  };\n  const handleKeyDown = e => {\n    // Function for handling enter key press\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n  const toggleTheme = () => {\n    // Function for toggling theme\n    setTheme(prevTheme => prevTheme === 'main' ? 'light' : 'main');\n  };\n  const recommendSongs = async () => {\n    try {\n      const accessToken = localStorage.getItem('access_token');\n      const weatherGenres = mapWeatherToGenres(weatherData);\n\n      // Calculate total weight sum for genre probabilities\n      const totalWeight = weatherGenres.reduce((sum, genre) => sum + genre.weight, 0);\n\n      // Randomly select a genre based on weighted probabilities\n      let randomNumber = Math.random() * totalWeight;\n      let selectedGenre = null;\n      for (const genre of weatherGenres) {\n        if (randomNumber < genre.weight) {\n          selectedGenre = genre.genre;\n          break;\n        }\n        randomNumber -= genre.weight;\n      }\n\n      // Fetch recommendations based on the selected genre\n      const response = await Utils.getRecommendations(accessToken, null, [selectedGenre], null);\n      localStorage.setItem('recommendedTracks', JSON.stringify(response.tracks));\n      setRecommendedTracks(response.tracks);\n      localStorage.setItem('lastRefreshTime', Date.now());\n      setLastRefreshTime(Date.now());\n      setRefreshCount(prevCount => {\n        if (prevCount + 1 === 5) {\n          setCountdown(5 * 60 * 1000);\n          setShowButton(false);\n        }\n        return prevCount + 1;\n      });\n    } catch (error) {\n      console.error('Error fetching recommended tracks:', error);\n    }\n  };\n  const mapWeatherToGenres = weatherData => {\n    const weatherCondition = weatherData.weather[0].main.toLowerCase();\n    switch (weatherCondition) {\n      case 'clear':\n        return [{\n          genre: 'pop',\n          weight: 50\n        }, {\n          genre: 'hip-hop',\n          weight: 15\n        }, {\n          genre: 'electronic',\n          weight: 15\n        }, {\n          genre: 'disco',\n          weight: 10\n        }, {\n          genre: 'indie',\n          weight: 10\n        }];\n      case 'rain':\n        return [{\n          genre: 'classical',\n          weight: 40\n        }, {\n          genre: 'jazz',\n          weight: 30\n        }, {\n          genre: 'folk',\n          weight: 10\n        }];\n      case 'clouds':\n        return [{\n          genre: 'indie',\n          weight: 50\n        }, {\n          genre: 'rock',\n          weight: 30\n        }, {\n          genre: 'hip-hop',\n          weight: 20\n        }, {\n          genre: 'jazz',\n          weight: 10\n        }];\n      case 'thunder':\n        return [{\n          genre: 'rock',\n          weight: 50\n        }, {\n          genre: 'metal',\n          weight: 50\n        }];\n      default:\n        return [{\n          genre: 'pop',\n          weight: 100\n        }];\n    }\n  };\n  const savePlaylist = async () => {\n    // Function for saving playlist\n    try {\n      const accessToken = localStorage.getItem('access_token');\n      if (accessToken && userId && weatherData) {\n        // Make sure weatherData is available\n        // Create playlist\n        const playlistResponse = await createPlaylist(accessToken, userId, weatherData);\n        const playlistId = playlistResponse.id;\n\n        // Add recommended tracks to the playlist\n        await addTracksToPlaylist(accessToken, userId, playlistId, recommendedTracks.map(track => track.uri));\n        console.log('Playlist created and tracks added successfully');\n      } else {\n        console.error('Access token, user ID, or weather data not found');\n      }\n    } catch (error) {\n      console.error('Error saving playlist:', error);\n    }\n  };\n  const createPlaylist = async (accessToken, userId, weatherData) => {\n    // Function for creating playlist\n    const cityName = weatherData.name; // Extract city name from weather data\n    //const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n    const weatherCondition = translateWeatherCondition(weatherData.weather[0].main.toLowerCase());\n    const formattedDate = `${new Date().getDate().toString().padStart(2, '0')}/${(new Date().getMonth() + 1).toString().padStart(2, '0')}/${new Date().getFullYear()}`;\n    const playlistName = `${cityName} ${weatherCondition} ${formattedDate}`;\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: playlistName,\n        public: true\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create playlist');\n    }\n    return response.json();\n  };\n  const handlePreviewPlay = (previewUrl, track) => {\n    if (currentPreview) {\n      Utils.pausePreview(currentPreview);\n    }\n    const audio = Utils.playPreview(previewUrl, setCurrentPreview);\n    setPlayingTrack(track);\n    setIsPlaying(true); // Set playing state to true when starting playback\n\n    // Add event listener for audio ended to change button text when song finishes playing\n    audio.addEventListener('ended', () => {\n      setIsPlaying(false); // Update playing state to false when song finishes playing\n    });\n  };\n  const handlePause = () => {\n    if (currentPreview) {\n      Utils.pausePreview(currentPreview);\n      setIsPlaying(false); // Update playing state to false when pausing\n    }\n  };\n  const translateWeatherCondition = condition => {\n    switch (condition.toLowerCase()) {\n      case 'clear':\n        return 'Słonecznie';\n      case 'rain':\n        return 'Deszczowo';\n      case 'clouds':\n        return 'Pochmurnie';\n      case 'thunder':\n        return 'Burzowo';\n      default:\n        return 'Inny';\n    }\n  };\n  const addTracksToPlaylist = async (accessToken, userId, playlistId, trackUris) => {\n    // Function for adding tracks to playlist\n    const url = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        uris: trackUris\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add tracks to playlist');\n    }\n    return response.json();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter city name\",\n            spellCheck: \"false\",\n            value: city,\n            onChange: handleChange,\n            onKeyDown: handleKeyDown // Enables search by hitting enter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSearch,\n            children: \"Szukaj\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 21\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 38\n        }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather\",\n          children: [!loggedIn &&\n          /*#__PURE__*/\n          // Render only if not logged in\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Cze\\u015B\\u0107!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Je\\u015Bli chcesz skorzysta\\u0107 z wszystkich dost\\u0119pnych opcji aplikacji, zaloguj si\\u0119.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true), loggedIn &&\n          /*#__PURE__*/\n          // Render only if logged in\n          _jsxDEV(\"h3\", {\n            children: [\"Cze\\u015B\\u0107, \", userName, \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Pogoda dla miasta \", weatherData.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Warunki Pogodowe: \", translateWeatherCondition(weatherData.weather[0].main)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperatura: \", Math.round(weatherData.main.temp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Wilgotno\\u015B\\u0107: \", weatherData.main.humidity, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [loggedIn && !showButton && countdown !== null &&\n          /*#__PURE__*/\n          // Check loggedIn and showButton states\n          _jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Wszystkie od\\u015Bwie\\u017Cenia zosta\\u0142y wykorzystane.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Prosz\\u0119 poczeka\\u0107: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 36\n              }, this), \" \", Math.floor(countdown / 60000), \":\", (countdown % 60000 / 1000).toFixed(0).padStart(2, '0')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 29\n          }, this), loggedIn && showButton &&\n          /*#__PURE__*/\n          // Check both loggedIn and showButton states\n          _jsxDEV(\"button\", {\n            className: \"recommend-songs\",\n            onClick: recommendedTracks.length > 0 ? recommendSongs : recommendSongs,\n            children: recommendedTracks.length > 0 ? \"Refresh Recommendations\" : \"Recommend Songs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 29\n          }, this), recommendedTracks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Rekomendowane piosenki:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"recommend-songs\",\n              onClick: savePlaylist,\n              children: \"Zapisz Playlist\\u0119\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"recommended-main\",\n              children: /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: recommendedTracks.map((track, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: track.album.images[0].url,\n                      alt: \"Album Cover\",\n                      style: {\n                        width: '50px',\n                        height: '50px'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 520,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 518,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      style: {\n                        fontWeight: 'bold'\n                      },\n                      children: track.artists.map(artist => artist.name).join(', ')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 524,\n                      columnNumber: 49\n                    }, this), \" - \", track.name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 526,\n                      columnNumber: 49\n                    }, this), track.preview_url ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: playingTrack === track && isPlaying ? /*#__PURE__*/_jsxDEV(\"button\", {\n                        onClick: handlePause,\n                        children: \"Zapauzuj\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 530,\n                        columnNumber: 7\n                      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                        onClick: () => handlePreviewPlay(track.preview_url, track),\n                        children: \"Odtw\\xF3rz\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 532,\n                        columnNumber: 7\n                      }, this)\n                    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"song-preview\",\n                      children: \"Preview not available\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 536,\n                      columnNumber: 3\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 522,\n                    columnNumber: 45\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 517,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 17\n      }, this), loggedIn ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login\",\n        onClick: handleLogin,\n        children: \"Zaloguj si\\u0119 ze Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"daiog1AYWehPWl8SeRGhKAoHfhs=\", true);\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Utils","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","city","setCity","weatherData","setWeatherData","errorMessage","setErrorMessage","userName","setUserName","loggedIn","setLoggedIn","theme","setTheme","localStorage","getItem","recommendedTracks","setRecommendedTracks","JSON","parse","userId","setUserId","refreshCount","setRefreshCount","lastRefreshTime","setLastRefreshTime","parseInt","countdown","setCountdown","showButton","setShowButton","lastActivityTime","setLastActivityTime","Date","now","sessionExpired","setSessionExpired","currentPreview","setCurrentPreview","playingTrack","setPlayingTrack","isPlaying","setIsPlaying","history","useHistory","handleLogin","authenticate","handleLogout","handleAuthorizationCode","then","accessToken","console","log","getProfile","data","display_name","id","catch","error","checkLoginStatus","window","addEventListener","handleUserActivity","removeEventListener","loginTime","isLoggedIn","currentTime","sessionDuration","handleUnauthorizedError","response","status","unlisten","listen","handlePause","alert","handleBeforeUnload","removeItem","lastCity","fetchWeatherData","refreshToken","document","body","classList","toggle","setItem","storedLastRefreshTime","remainingTime","storedRecommendedTracks","pausePreview","timer","setInterval","prevCountdown","clearInterval","handleSearch","handleChange","e","target","value","handleKeyDown","key","toggleTheme","prevTheme","recommendSongs","weatherGenres","mapWeatherToGenres","totalWeight","reduce","sum","genre","weight","randomNumber","Math","random","selectedGenre","getRecommendations","stringify","tracks","prevCount","weatherCondition","weather","main","toLowerCase","savePlaylist","playlistResponse","createPlaylist","playlistId","addTracksToPlaylist","map","track","uri","cityName","name","translateWeatherCondition","formattedDate","getDate","toString","padStart","getMonth","getFullYear","playlistName","url","fetch","method","headers","public","ok","Error","json","handlePreviewPlay","previewUrl","audio","playPreview","condition","trackUris","uris","children","className","type","placeholder","spellCheck","onChange","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","onClick","round","temp","humidity","floor","toFixed","length","index","src","album","images","alt","style","width","height","fontWeight","artists","artist","join","preview_url","_c","$RefreshReg$"],"sources":["/Users/kacpertomaszewski/Documents/GitHub/Spot-The-Weather/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as Utils from './Utils'; // Import functions from Utils.js\n\nfunction Home() {\n    const [city, setCity] = useState(''); // State for storing the city input\n    const [weatherData, setWeatherData] = useState(null); // State for storing weather data\n    const [errorMessage, setErrorMessage] = useState(''); // State for error messages\n    const [userName, setUserName] = useState(''); // State for storing user's name\n    const [loggedIn, setLoggedIn] = useState(false); // State for user login status\n    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'main'); // State for storing theme\n    const [recommendedTracks, setRecommendedTracks] = useState(() => JSON.parse(localStorage.getItem('recommendedTracks')) || []); // State for storing recommended tracks\n    const [userId, setUserId] = useState(''); // State for storing user's Spotify user ID\n    const [refreshCount, setRefreshCount] = useState(0); // State for storing the refresh count\n    const [lastRefreshTime, setLastRefreshTime] = useState(() => parseInt(localStorage.getItem('lastRefreshTime')) || null); // State for storing the last refresh time\n    const [countdown, setCountdown] = useState(null); // State for countdown until next refresh\n    const [showButton, setShowButton] = useState(true); // State for showing or hiding the refresh button\n    const [lastActivityTime, setLastActivityTime] = useState(Date.now()); // State for tracking user activity\n    const [sessionExpired, setSessionExpired] = useState(false); // State for session expiration popup // W RAZIE CZEGO DO WYRZUCENIA\n    const [currentPreview, setCurrentPreview] = useState(null); // State to track current audio preview\n    const [playingTrack, setPlayingTrack] = useState(null); // State to track the currently playing track\n    const [isPlaying, setIsPlaying] = useState(false);\n    const history = useHistory(); // React Router history\n    \n\n    const handleLogin = Utils.authenticate; // Function for handling login\n\n    const handleLogout = () => {\n        Utils.handleLogout(setLoggedIn); // Pass setLoggedIn as an argument\n    };\n\n    useEffect(() => { // Effect for handling authorization code\n        Utils.handleAuthorizationCode()\n            .then(() => {\n                const accessToken = localStorage.getItem('access_token');\n                if (accessToken) {\n                    console.log('Access Token:', accessToken); // Logging access token\n                    Utils.getProfile(accessToken)\n                        .then(data => {\n                            if (data) {\n                                console.log('User Profile:', data); // Logging user profile\n                                setUserName(data.display_name); // Setting user's name\n                                setUserId(data.id); // Set the user's Spotify user ID\n                            }\n                        })\n                        .catch(error => {\n                            console.error('Error fetching user profile:', error);\n                        });\n                } else {\n                    console.error('Access token not found');\n                }\n            })\n            .catch(error => {\n                console.error('Error handling authorization code:', error);\n            });\n    }, []);\n\n    useEffect(() => {\n        // Check login status and session expiry on component mount\n        checkLoginStatus();\n        // Add event listener for user activity\n        window.addEventListener('mousemove', handleUserActivity);\n        window.addEventListener('keypress', handleUserActivity);\n\n        return () => {\n            // Cleanup event listener on component unmount\n            window.removeEventListener('mousemove', handleUserActivity);\n            window.removeEventListener('keypress', handleUserActivity);\n        };\n    }, []);\n\n    useEffect(() => {\n        // Check login status and session expiry when last activity time changes\n        checkLoginStatus();\n    }, [lastActivityTime]);\n\n    const checkLoginStatus = () => {\n        const loginTime = localStorage.getItem('login_time');\n        const isLoggedIn = localStorage.getItem('access_token') !== null;\n\n        if (isLoggedIn && loginTime) {\n            const currentTime = Date.now();\n            const sessionDuration = 60 * 60 * 1000; // Session duration in milliseconds (1 hour)\n\n            if (currentTime - parseInt(loginTime) > sessionDuration) {\n                // Session expired, logout user\n                handleLogout();\n            } else {\n                setLoggedIn(true);\n            }\n        }\n    };\n\n    const handleUnauthorizedError = (error) => {\n        if (error.response && error.response.status === 401) {\n            setSessionExpired(true); // Set session expiration state\n            handleLogout(); // Log out the user\n        }\n    };\n\n    useEffect(() => {\n        // Add event listener for route changes\n        const unlisten = history.listen(() => {\n            handlePause(); // Pause the song when route changes\n        });\n\n        return () => {\n            unlisten(); // Cleanup event listener on component unmount\n        };\n    }, [history]);\n\n    useEffect(() => {\n        if (sessionExpired) {\n            alert('Sesja wygasła. (401)'); // Display popup for session expiration\n        }\n    }, [sessionExpired]);\n\n    \n\n    const handleUserActivity = () => {\n        // Update last activity time when user interacts with the page\n        setLastActivityTime(Date.now());\n    };\n\n    const handleBeforeUnload = () => {\n        // Clear recommended tracks from local storage when the user closes the app\n        localStorage.removeItem('recommendedTracks');\n    };\n\n    useEffect(() => {\n        window.addEventListener('beforeunload', handleBeforeUnload);\n        return () => {\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        };\n    }, []);\n    \n\n    useEffect(() => { // Effect for setting city and fetching weather data\n        const lastCity = localStorage.getItem('lastCity');\n        if (lastCity) {\n            setCity(lastCity);\n            Utils.fetchWeatherData(lastCity)\n                .then(({ data, error }) => {\n                    if (error) {\n                        setErrorMessage(error);\n                    } else {\n                        setWeatherData(data);\n                        setErrorMessage('');\n                    }\n                });\n        }\n\n        const accessToken = localStorage.getItem('access_token');\n        if (accessToken) {\n            Utils.getProfile(accessToken)\n                .then(data => {\n                    if (data) {\n                        setUserName(data.display_name);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user profile:', error);\n                });\n        } else {\n            console.error('Access token not found');\n        }\n    }, []);\n\n    useEffect(() => { // Effect for handling access token and user profile\n        const accessToken = localStorage.getItem('access_token');\n        const refreshToken = localStorage.getItem('refresh_token');\n    \n        if (accessToken) {\n            Utils.getProfile(accessToken, refreshToken)\n                .then(data => {\n                    if (data) {\n                        setUserName(data.display_name);\n                        setLoggedIn(true);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user profile:', error);\n                    if (error.response && error.response.status === 401) {\n                        handleLogout(); // Log out user if 401 error occurs\n                    }\n                });\n        } else {\n            console.error('Access token not found');\n        }\n    }, []);\n    \n\n    useEffect(() => { // Effect for setting theme\n        document.body.classList.toggle('light-theme', theme === 'light');\n        localStorage.setItem('theme', theme);\n    }, [theme]);\n\n    useEffect(() => { // Effect for handling countdown until next refresh\n        const storedLastRefreshTime = localStorage.getItem('lastRefreshTime');\n        if (storedLastRefreshTime) {\n            const remainingTime = 5 * 60 * 1000 - (Date.now() - parseInt(storedLastRefreshTime));\n            if (remainingTime > 0) {\n                setCountdown(remainingTime);\n                setShowButton(false); // Hide the button when countdown starts\n            }\n        }\n    }, []);\n\n    useEffect(() => { \n        const storedRecommendedTracks = localStorage.getItem('recommendedTracks');\n        if (storedRecommendedTracks) {\n            setRecommendedTracks(JSON.parse(storedRecommendedTracks));\n        }\n    }, []);\n    \n    useEffect(() => {\n        return () => {\n          if (currentPreview) {\n            Utils.pausePreview(currentPreview); // Pause the audio preview\n            setCurrentPreview(null); // Reset current audio preview\n            setPlayingTrack(null); // Reset playing track\n            setIsPlaying(false); // Reset playing state\n          }\n        };\n      }, []);\n      \n      \n      \n    useEffect(() => { // Effect for updating countdown timer\n        if (countdown !== null) {\n            const timer = setInterval(() => {\n                setCountdown(prevCountdown => {\n                    if (prevCountdown <= 0) {\n                        clearInterval(timer);\n                        setShowButton(true); // Show the button when countdown ends\n                        return 0;\n                    } else {\n                        return prevCountdown - 1000;\n                    }\n                });\n            }, 1000);\n            return () => clearInterval(timer);\n        }\n    }, [countdown]);\n\n    const handleSearch = () => { // Function for handling search\n        Utils.fetchWeatherData(city)\n            .then(({ data, error }) => {\n                if (error) {\n                    setErrorMessage(error);\n                    // Alert the user for an invalid city name\n                    alert('Niepoprawna nawzwa miejscowości');\n                } else {\n                    setWeatherData(data);\n                    setErrorMessage('');\n                    //localStorage.setItem('lastCity', city);\n                    // setRefreshCount(0); // Reset refresh count when city is changed\n                    setShowButton(true); // Show the button after search\n                }\n            });\n    };\n    \n\n    const handleChange = (e) => { // Function for handling input change\n        setCity(e.target.value);\n    };\n\n    const handleKeyDown = (e) => { // Function for handling enter key press\n        if (e.key === 'Enter') {\n            handleSearch();\n        }\n    };\n\n    const toggleTheme = () => { // Function for toggling theme\n        setTheme((prevTheme) => (prevTheme === 'main' ? 'light' : 'main'));\n    };\n\n    const recommendSongs = async () => {\n        try {\n            const accessToken = localStorage.getItem('access_token');\n            const weatherGenres = mapWeatherToGenres(weatherData);\n    \n            // Calculate total weight sum for genre probabilities\n            const totalWeight = weatherGenres.reduce((sum, genre) => sum + genre.weight, 0);\n    \n            // Randomly select a genre based on weighted probabilities\n            let randomNumber = Math.random() * totalWeight;\n            let selectedGenre = null;\n    \n            for (const genre of weatherGenres) {\n                if (randomNumber < genre.weight) {\n                    selectedGenre = genre.genre;\n                    break;\n                }\n                randomNumber -= genre.weight;\n            }\n    \n            // Fetch recommendations based on the selected genre\n            const response = await Utils.getRecommendations(accessToken, null, [selectedGenre], null);\n            localStorage.setItem('recommendedTracks', JSON.stringify(response.tracks));\n            setRecommendedTracks(response.tracks);\n    \n            localStorage.setItem('lastRefreshTime', Date.now());\n            setLastRefreshTime(Date.now());\n    \n            setRefreshCount((prevCount) => {\n                if (prevCount + 1 === 5) {\n                    setCountdown(5 * 60 * 1000);\n                    setShowButton(false);\n                }\n                return prevCount + 1;\n            });\n        } catch (error) {\n            console.error('Error fetching recommended tracks:', error);\n        }\n    };\n    \n    \n    const mapWeatherToGenres = (weatherData) => {\n        const weatherCondition = weatherData.weather[0].main.toLowerCase();\n    \n        switch (weatherCondition) {\n            case 'clear':\n                return [\n                    { genre: 'pop', weight: 50 },\n                    { genre: 'hip-hop', weight: 15 },\n                    { genre: 'electronic', weight: 15 },\n                    { genre: 'disco', weight: 10 },\n                    { genre: 'indie', weight: 10 }\n                ];\n            case 'rain':\n                return [\n                    { genre: 'classical', weight: 40 },\n                    { genre: 'jazz', weight: 30 },\n                    { genre: 'folk', weight: 10 }\n                ];\n            case 'clouds':\n                return [\n                    { genre: 'indie', weight: 50 },\n                    { genre: 'rock', weight: 30 },\n                    { genre: 'hip-hop', weight: 20 },\n                    { genre: 'jazz', weight: 10 }\n                ];\n            case 'thunder':\n                return [\n                    { genre: 'rock', weight: 50 },\n                    { genre: 'metal', weight: 50 }\n                ];\n            default:\n                return [\n                    { genre: 'pop', weight: 100 }\n                ];\n        }\n    };\n    \n    \n\n    const savePlaylist = async () => { // Function for saving playlist\n        try {\n            const accessToken = localStorage.getItem('access_token');\n            if (accessToken && userId && weatherData) { // Make sure weatherData is available\n                // Create playlist\n                const playlistResponse = await createPlaylist(accessToken, userId, weatherData);\n                const playlistId = playlistResponse.id;\n\n                // Add recommended tracks to the playlist\n                await addTracksToPlaylist(accessToken, userId, playlistId, recommendedTracks.map(track => track.uri));\n\n                console.log('Playlist created and tracks added successfully');\n            } else {\n                console.error('Access token, user ID, or weather data not found');\n            }\n        } catch (error) {\n            console.error('Error saving playlist:', error);\n        }\n    };\n\n    const createPlaylist = async (accessToken, userId, weatherData) => { // Function for creating playlist\n        const cityName = weatherData.name; // Extract city name from weather data\n        //const weatherCondition = weatherData.weather[0].main.toLowerCase(); // Extract weather condition from weather data\n        const weatherCondition = translateWeatherCondition(weatherData.weather[0].main.toLowerCase());\n        const formattedDate = `${new Date().getDate().toString().padStart(2, '0')}/${(new Date().getMonth() + 1).toString().padStart(2, '0')}/${new Date().getFullYear()}`;\n        const playlistName = `${cityName} ${weatherCondition} ${formattedDate}`;\n\n        const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: playlistName,\n                public: true,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to create playlist');\n        }\n        return response.json();\n    };\n\n    \n\n    const handlePreviewPlay = (previewUrl, track) => {\n        if (currentPreview) {\n            Utils.pausePreview(currentPreview);\n        }\n    \n        const audio = Utils.playPreview(previewUrl, setCurrentPreview);\n        setPlayingTrack(track);\n        setIsPlaying(true); // Set playing state to true when starting playback\n    \n        // Add event listener for audio ended to change button text when song finishes playing\n        audio.addEventListener('ended', () => {\n            setIsPlaying(false); // Update playing state to false when song finishes playing\n        });\n    };\n    \n      \n      \n      const handlePause = () => {\n        if (currentPreview) {\n          Utils.pausePreview(currentPreview);\n          setIsPlaying(false); // Update playing state to false when pausing\n        }\n      };\n      \n      const translateWeatherCondition = (condition) => {\n        switch (condition.toLowerCase()) {\n            case 'clear':\n                return 'Słonecznie';\n            case 'rain':\n                return 'Deszczowo';\n            case 'clouds':\n                return 'Pochmurnie';\n            case 'thunder':\n                return 'Burzowo';\n            default:\n                return 'Inny';\n        }\n    };\n    \n\n    const addTracksToPlaylist = async (accessToken, userId, playlistId, trackUris) => { // Function for adding tracks to playlist\n        const url = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                uris: trackUris,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to add tracks to playlist');\n        }\n        return response.json();\n    };\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"card\">\n                    <div className=\"search\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter city name\"\n                            spellCheck=\"false\"\n                            value={city}\n                            onChange={handleChange}\n                            onKeyDown={handleKeyDown} // Enables search by hitting enter\n                        />\n                        <button onClick={handleSearch}>Szukaj</button>\n                    </div>\n\n                    {errorMessage && <div className=\"error\"><p>{errorMessage}</p></div>}\n                    {weatherData && (\n                        <div className=\"weather\">\n                            {!loggedIn && ( // Render only if not logged in\n                                <>\n                                    <h3>Cześć!</h3>\n                                    <h4>Jeśli chcesz skorzystać z wszystkich dostępnych opcji aplikacji, zaloguj się.</h4>\n                                </>\n                            )}\n                            {loggedIn && ( // Render only if logged in\n                                <h3>Cześć, {userName}!</h3>\n                            )}\n                            <h2>Pogoda dla miasta {weatherData.name}</h2>\n                            <p>Warunki Pogodowe: {translateWeatherCondition(weatherData.weather[0].main)}</p>\n                            <p>Temperatura: {Math.round(weatherData.main.temp)}°C</p>\n                            <p>Wilgotność: {weatherData.main.humidity}%</p>\n                        </div>\n                    )}\n                    <div className=\"container\">\n                    {loggedIn && !showButton && countdown !== null && ( // Check loggedIn and showButton states\n                            <div>\n                                <p>Wszystkie odświeżenia zostały wykorzystane.</p>\n                                {/* <p>You used up all of your refreshes. Please wait:</p> */}\n\n                                <p><b>Proszę poczekać: </b> {Math.floor(countdown / 60000)}:{(countdown % 60000 / 1000).toFixed(0).padStart(2, '0')}</p>\n                            </div>\n                        )}\n                        {loggedIn && showButton && ( // Check both loggedIn and showButton states\n                            <button className='recommend-songs' onClick={recommendedTracks.length > 0 ? recommendSongs : recommendSongs}>\n                                {recommendedTracks.length > 0 ? \"Refresh Recommendations\" : \"Recommend Songs\"}\n                            </button>\n                        )}\n                        {recommendedTracks.length > 0 && (\n                            <div>\n                                <h3>Rekomendowane piosenki:</h3>\n                                <button className='recommend-songs' onClick={savePlaylist}>Zapisz Playlistę</button>\n                                <div className=\"recommended-main\">\n                                <ul>\n                                    {recommendedTracks.map((track, index) => (\n                                        <li key={index}>\n                                            <div>\n                                                {/* Render album image */}\n                                                <img src={track.album.images[0].url} alt=\"Album Cover\" style={{ width: '50px', height: '50px' }} />\n                                            </div>\n                                            <div>\n                                                {/* Render track name and artists */}\n                                                <span style={{ fontWeight: 'bold' }}>{track.artists.map(artist => artist.name).join(', ')}</span> - {track.name}\n                                                {/* Check if track has preview URL and render audio player */}\n                                                <br></br>\n                                                {track.preview_url ? (\n  <>\n    {playingTrack === track && isPlaying ? (\n      <button onClick={handlePause}>Zapauzuj</button>\n    ) : (\n      <button onClick={() => handlePreviewPlay(track.preview_url, track)}>Odtwórz</button>\n    )}\n  </>\n) : (\n  <p className=\"song-preview\">Preview not available</p>\n)}\n\n                                            </div>\n                                        </li>\n                                    ))}\n                                </ul>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {/* <button onClick={() => Utils.saveAsImage('weather')}>Save Image</button> */}\n\n                {loggedIn ? (\n                    <button onClick={handleLogout}>Logout</button>\n                ) : (\n                    <button className=\"login\" onClick={handleLogin}>Zaloguj się ze Spotify</button>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}